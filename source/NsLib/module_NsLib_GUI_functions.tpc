// this part will be regulated by js

def { // UI types
	UIOBJ_undefined = 0
	UIOBJ_checkbox = 1
	UIOBJ_simplebutton = 2
	UIOBJ_simplesprite = 3
	UIOBJ_strpic = 4

}

def {
	PICCMD_Keep = 0
	PICCMD_Refresh = 1
	PICCMD_Erase = 2
	PICCMD_Genstr = 3

}


// // // // // // // // // // // // 
// ACTUAL FUNCTIONS START
// // // // // // // // // // // // 


// DIS Advanced presentation system

__fn init_GUI_Manager {

	// call js Ns_GUI_Manager Object and init
	@js .run "
		Ns_GUI_Manager.resetPresens()
	"
	
}

// RENDERING MANAGEMENT

// ACHTUNG set these addresses properly after you decide.
deft Str_UI_ORDER = 731

// SWITCH
def ADR_CALL_UI_RENDERING_FLAG = 131 // change here
sname[ADR_CALL_UI_RENDERING_FLAG], "ADR_CALL_UI_RENDERING_FLAG"
defs Bool_RUN_UI_ORDER = ADR_CALL_UI_RENDERING_FLAG

// DEPLOY STRS
deft Str_Deploy_head = 3301 // DIS SYSTEM. change here
deft Str_Parsing = 3001 //__id(SScmd) // <- from ScaleScript header 
deft{ // kari
	Str_Parsing1 = __id(Str_Parsing) 
	Str_Parsing2 
	Str_Parsing3 
	Str_Parsing4 


}

defv { // kari
	ParsV1 = __id(reg1)
	ParsV2
	ParsV3
	ParsV4
	ParsV5
	ParsV6
	ParsV7
	ParsV8
}

def DELIMITER = ";" 

// RENDERING MANAGER!
__fn NsGUI_CEV_UI_RENDERING_MANAGEMENT {
	// split ORDER string given from js UI manager object 
	Str_UI_ORDER.split(DELIMITER, Str_Deploy_head, guiVar7)
	guiVar8 = __id(Str_Deploy_head)
	guiVar1 = 0
	@loop bl  {
		@if guiVar7 <= guiVar1 {@break} //

		t[guiVar8].split(",", Str_Parsing, reg1)
		Str_Parsing.toNum(guiVar2)

		// CHECK objtype 'n shiiiet
		defv UIT = __id(guiVar2) // UI object type

		@if UIT == UIOBJ_checkbox { // simple checkbox
			UIT_checkbox_Render()

		}.elif ObjID == UIOBJ_simplesprite { // 

		}.elif ObjID == UIOBJ_strpic { // 
			UIT_strpic_Render()
		}

		guiVar1 += 1
		guiVar8 += 1  // get current shit
	
	}
	
	
}


// Simple_Checkbox
// ORDER = `${this.UI_objtype},${this.pid},${this.picCmd},${this.txt},${this.x},${this.y}`;
__fn UIT_checkbox_Render {
	str_toNum_array(Str_Parsing,ParsV1,6) // ?
	// Check box render function has only Keep or Refresh
	@if ParsV3 == PICCMD_Keep {
			@pic[ParsV2].move {
				.pos ParsV5, ParsV6 .center
				.scale 100
				.trans 0
				.time 0
				.rgbs 100, 100, 100, 100
			}
	}.elif ParsV3 == PICCMD_Refresh {
			
			@pic[ParsV2].strpic {
			     Str_Parsing4 // this.txt
			    .pos ParsV5, ParsV6 .center
			    .size 16, 15    .chromakey 1
			    .scale 100
			    .trans 0
			    .rgbs 100, 100, 100, 100
			    .font DIS_gui_UI_font, 12
			    .spacing 0, 0
			    .skin DIS_simple_switch_skin .nobg .noPadding
			    .mapLayer DIS_gui_Layer
			    .eraseWhenTransfer
			    .affectedByFlash
			    .affectedByShake
			}
	}

}

// simple sprite
// ORDER = `${this.UI_objtype},${this.pid},${this.picCmd},${this.txt},${this.x},${this.y}`;
__fn UIT_sprite_Render {
	str_toNum_array(Str_Parsing,ParsV1,6) // ?
	// Check box render function has only Keep or Refresh
	@if ParsV3 == PICCMD_Keep {
			@pic[ParsV2].move {
				.pos ParsV5, ParsV6 .center
				.scale 100
				.trans 0
				.time 0
				.rgbs 100, 100, 100, 100
			}
	}.elif ParsV3 == PICCMD_Refresh {
			
			@pic[ParsV2].strpic {
			     Str_Parsing4 // this.txt
			    .pos ParsV5, ParsV6 .center
			    .size 16, 15    .chromakey 1
			    .scale 100
			    .trans 0
			    .rgbs 100, 100, 100, 100
			    .font DIS_gui_UI_font, 12
			    .spacing 0, 0
			    .skin DIS_simple_switch_skin .nobg .noPadding
			    .mapLayer DIS_gui_Layer
			    .eraseWhenTransfer
			    .affectedByFlash
			    .affectedByShake
			}
	}

}

// ORDER = `${this.UI_objtype},${this.pid},${this.picCmd},${this.text},${this.x},${this.y}`;
__fn UIT_strpic_Render {
	str_toNum_array(Str_Parsing,ParsV1,6) // ?
	// Check box render function has only Keep or Refresh
	@if ParsV3 == PICCMD_Keep {
			@pic[ParsV2].move {
				.pos ParsV5, ParsV6 .center
				.scale 100
				.trans 0
				.time 0
				.rgbs 100, 100, 100, 100
			}
	}.elif ParsV3 == PICCMD_Refresh {
			@pic[ParsV2].strpic {
			     Str_Parsing4 // this.txt
			    .pos ParsV5, ParsV6 .center
			    .size 0, 0    .chromakey 1
			    .scale 100
			    .trans 0
			    .rgbs 100, 100, 100, 100
			    .font DIS_gui_UI_font, DIS_Font_UI_size
			    .spacing 0, 0
			    .skin "" .nobg .noPadding
			    .mapLayer DIS_gui_Layer
			    .eraseWhenTransfer
			    .affectedByFlash
			    .affectedByShake
			}
	}



}










__fn ui_start_presentation $presen_name $presen_picid $on_load $on_run $on_close {
	@comment __str($presen_name)


	$on_load

	@wait 0

	@loop bl {

		$on_run

	}

	$on_close

}
__fn ui_start_presentation_leg $presen_name $flags $presen_picid $on_load $on_run $on_close {
	@comment __str($presen_name)


	$on_load

	@wait 0

	@loop bl {

		$on_run

	}

	$on_close

}

//#################################
//Simple GUI functions
//#################################

// Functions below do not use picture buffer system, so easy to use..
// On the other hand, this is not for making something complex


__fn ui_start_simple_presentation $presen_name $flags $bg_picid $bg_pic_name $bg_pic_array $on_load $on_run $on_close {
	@comment __str($presen_name)
	__if $flags & PRESENTATION_FLAG_Load_Picture {
		// load $bg_pic_name
		// $bg_pic_detail_array must be [X,Y]
		v[__id(guiVar1)..__id(guiVar2)] = $bg_pic_array

		@pic[$bg_picid].show {
		    $bg_pic_name
		    .pos guiVar1, guiVar2 .topLeft
		    .chromakey 1
		    .scale 100
		    .trans 0
		    .rgbs 100, 100, 100, 100
		    .mapLayer DIS_gui_Layer
		    .affectedByShake
		}

	}.elif $flags & PRESENTATION_FLAG_Use_Already_Loaded_Picture {

	}.elif $flags & PRESENTATION_FLAG_Make_Window {
		// $bg_pic_detail_array must be [X,Y,sizeX,sizeY]
		ui_create_window($bg_picid,$bg_pic_array[0],$bg_pic_array[1],$bg_pic_array[2],$bg_pic_array[3])

	}.else bl {// if no flag was on - use nothing, The entire screen will become standard of Presentation coordinates 

	}

	$on_load

	@wait 0

	@loop bl {

		$on_run

	}

	$on_close

}

__fn ui_create_canvas $picid $X $Y $SizeX $SizeY $flags $SystemPictureFile {
	
	func_strpic_init_check

	@pic[$picid].strpic {
	    ""
	    .pos $X, $Y .center
	    .size $SizeX, $SizeY    .chromakey 1
	    .scale 100
	    .trans 100
	    .rgbs 100, 100, 100, 100
	    .font "", 12 
	    .spacing 0, 4
	    .skin $SystemPictureFile .nobg .noframe .noGradation .noPadding
	    .mapLayer DIS_gui_Layer
	    .eraseWhenTransfer
	    .affectedByShake
	}

	macro_check_GUI_position_flag

}
__fn ui_create_window $picid $X $Y $SizeX $SizeY $flags $SystemPictureFile {

	func_strpic_init_check

	@pic[$picid].strpic {
	    ""
	    .pos $X, $Y .center
	    .size $SizeX, $SizeY    .chromakey 1
	    .scale 100
	    .trans 100
	    .rgbs 100, 100, 100, 100
	    .font "", 12 .noShadow
	    .spacing 0, 4
	    .skin $SystemPictureFile .stretch .noGradation .noPadding
	    .mapLayer DIS_gui_Layer
	    .eraseWhenTransfer
	    .affectedByShake
	}
	macro_check_GUI_position_flag
}

__fn ui_create_textbox $picid $Str $X $Y $SizeX $SizeY $flags $SystemPictureFile $font $fontsize { //  adjust later
	func_strpic_init_check

	@pic[$picid].strpic {
	    $Str
	    .pos $X, $Y .center
	    .size $SizeX, $SizeY    .chromakey 1
	    .scale 100
	    .trans 100
	    .rgbs 100, 100, 100, 100
	    .font DIS_gui_UI_font, 11
	    .spacing 0, 4
	    .skin $SystemPictureFile .nobg .noframe .noGradation .noPadding
	    .mapLayer DIS_gui_Layer
	    .eraseWhenTransfer
	    .affectedByFlash
	    .affectedByShake
	}
	macro_check_GUI_position_flag

}

// #######################
// simple button functions
// #######################

// create simple button - nothing but just a mere strpic process.
// simple button has only single function.
__fn ui_create_simple_button $picid $text $X $Y $SizeX $SizeY {
// should I explain how those args work? it's bretty simple so I don't think so...

	func_strpic_init_check

	@pic[$picid].strpic {
	    __str($text)
	    .pos $X, $Y .center
	    .size $SizeX, $SizeY    .chromakey 1
	    .scale 100
	    .trans 100
	    .rgbs 100, 100, 100, 100
	    .font DIS_gui_UI_font, 11
	    .spacing 0, 4
	    .skin DIS_simple_switch_skin .nobg
	    .mapLayer DIS_gui_Layer
	    .eraseWhenTransfer
	    .affectedByFlash
	    .affectedByShake
	}
	macro_check_GUI_position_flag
}

// put this function in ui loop process 
__fn ui_simple_button_process $picid $button_L $button_R $mp_on_button $mp_off_button {
// ARGS
// var $picid - Selected button picid
// block $buttonL - Process Block for LMB (if you use only RMB, just put bl)
// block $buttonR - Process Block for RMB (ignorable)
// block $mp_on_button - Process Block that triggered by Mouse Pointer on button (ignorable)
// block $mp_off_button -  Process Block that triggered by Mouse Pointer off button (ignorable)


	__if $button_L == "" && $button_R == "" {
		ui_simple_button_process_ERROR_No_functions_set_for_button
	}

	// Save picture infomation into miscvars
	@pic[$picid].getInfo .cewh .currentRect guiVar1, guiVar2, guiVar3, guiVar4
	@if `between(DIS_gui_mouse_pointer_X, guiVar1 - guiVar3 / 2, guiVar1 + guiVar3 / 2) && between(DIS_gui_mouse_pointer_Y, guiVar2 - guiVar4 / 2, guiVar2 + guiVar4 / 2) {

		__if $mp_on_button == "" {
		    @pic[$picid].move {
			.pos guiVar1, guiVar2 .center
			.scale 100
			.trans 0
			.time -2
			.rgbs 0, 200, 0, 100
		    }
		} .else bl {
			$mp_on_button
		}


	    @if DIS_gui_mouse_click == 1005 { //  Only

		    __if PROJECT_NAME == "DIS_LEGACY"{
				@if s[11] .isOff() {

				    $button_L
				    
				    s[11].on
				    
				}
			} .else bl {
				$button_L
			}
	    }.elif DIS_gui_mouse_click == 1006{

		    $button_R
	    }
	    
	} .else bl {

	    __if $mp_off_button == "" {
		    @pic[$picid].move {
			.pos guiVar1, guiVar2 .center
			.scale 100
			.trans 0
			.time -2
			.rgbs 100, 100, 100, 100
		    }
	    } .else bl {
		$mp_off_button
	    }
	}

}


// #######################
// CHECK BOX functions
// #######################

def {

GUI_OBJ_CHECKBOX_FLAG_load_picture = 0x10000000

}

__fn ui_create_check_box $picid $X $Y $targ_type $target $flags $picstr {
// should I explain how those args work? it's bretty simple so I don't think so...
	
	// get target state
	__if $targ_type == DIS_GUI_TARGET_TYPE_VAR ||$targ_type == DIS_GUI_TARGET_TYPE_SWITCH {
		// simply set $target to var1
		guiVar1 = $target
	}.elif $targ_type == DIS_GUI_TARGET_TYPE_BIT {
		// if you check bit, then you need to set $target = [var,flag]

		guiVar2 = $target[0]
		guiVar3 = $target[1]
		guiVar1 = guiVar2 & guiVar3
	}// Return DISgmiscv1

	func_strpic_init_check

	__if $flags & GUI_OBJ_CHECKBOX_FLAG_load_picture {
		__if $picstr == "" {ui_create_check_box_ERROR_Picture_to_load_is_not_set}
		ui_create_check_box_ERROR_incomplete_process
	}.else bl {
		// target == 1
		func_GUI_draw_simple_checkbox($picid,$X,$Y,guiVar1)
	}
	macro_check_GUI_position_flag
}

// put this function in ui loop process 
__fn ui_simple_checkbox_process $picid  $targ_type $target $button_L $mp_on_button $mp_off_button $flags {
// ARGS
// {var} $picid - Selected button picid
// DIS_GUI_TARGET_TYPE $targ_type
// $target - If your target is FLAG, then set array [var,target_flag] otherwise just set target number 
// block $buttonL - Process Block for LMB (if you use only RMB, just put bl)
// block $mp_on_button - Process Block that triggered by Mouse Pointer on button (ignorable)
// block $mp_off_button -  Process Block that triggered by Mouse Pointer off button (ignorable)

	// Save picture infomation into miscvars
	@pic[$picid].getInfo .cewh .currentRect guiVar1, guiVar2, guiVar3, guiVar4
	@if `between(DIS_gui_mouse_pointer_X, guiVar1 - guiVar3 / 2, guiVar1 + guiVar3 / 2) && between(DIS_gui_mouse_pointer_Y, guiVar2 - guiVar4 / 2, guiVar2 + guiVar4 / 2) {

	    $mp_on_button

	@if DIS_gui_mouse_click == 1005 { //  Only
		__if PROJECT_NAME == "DIS_LEGACY"{
				@if s[11] .isOff() {
				    macro_GUI_simple_checkbox_flag_management($picid  $targ_type $target)
				    $button_L
				    
				    s[11].on
				    
				}
			} .else bl {
				macro_GUI_simple_checkbox_flag_management($picid  $targ_type $target)
				$button_L
			}
		}
	    
	} .else bl {
		$mp_off_button
	}

}


// ????????????
__fn macro_GUI_simple_checkbox_flag_management $picid $targ_type $target {
	__if $targ_type == DIS_GUI_TARGET_TYPE_VAR {// if target is Var
		// simply set $target to var1
		__if $target == "" {macro_GUI_checkbox_flag_management_ERROR_Target_object_is_not_set}// ERROR
		v[__id($target)] ^= 0x1 // ?
		guiVar1 = v[__id($target)] & 0x1

	}.elif $targ_type == DIS_GUI_TARGET_TYPE_SWITCH{ // if target is Switch
		s[__id($target)].toggle
		guiVar1 = s[__id($target)]

	}.elif $targ_type == DIS_GUI_TARGET_TYPE_BIT {// if target is Var Bits
		// you need to set $target = [&var,flag] when you set target as TYPE_BIT, this makes you confused more or less
		guiVar2 = $target[0] 
		v[guiVar2] ^= $target[1] // return AND 
		guiVar1 = v[guiVar2] & $target[1]
	}
	// Return guiVar1 to check if flag is on or not in anycase

	@pic[$picid].getInfo .cewh .currentRect guiVar2, guiVar3, guiVar4, guiVar4// restore current position of pic
	// refresh simple
	func_GUI_draw_simple_checkbox($picid,guiVar2,guiVar3,guiVar1)
	// click sound - if you turned off, just ignore this and set up your own process 
	func_DIS_gui_auto_sound_checkbox
}

__fn func_GUI_draw_simple_checkbox $picid $X $Y $CHECK {
		@if $CHECK >= 1 {
			@pic[$picid].strpic {
			    " x"
			    .pos $X, $Y .center
			    .size 16, 15    .chromakey 1
			    .scale 100
			    .trans 0
			    .rgbs 100, 100, 100, 100
			    .font DIS_gui_UI_font, 12
			    .spacing 0, 0
			    .skin DIS_simple_switch_skin .nobg .noPadding
			    .mapLayer DIS_gui_Layer
			    .eraseWhenTransfer
			    .affectedByFlash
			    .affectedByShake
			}
		}.else bl {// target == 0
			@pic[$picid].strpic {
			    ""
			    .pos $X, $Y .center
			    .size 16, 15    .chromakey 1
			    .scale 100
			    .trans 0
			    .rgbs 100, 100, 100, 100
			    .font DIS_gui_UI_font, 11
			    .spacing 0, 0
			    .skin DIS_simple_switch_skin .nobg .noPadding
			    .mapLayer DIS_gui_Layer
			    .eraseWhenTransfer
			    .affectedByFlash
			    .affectedByShake
			}
		}
}
