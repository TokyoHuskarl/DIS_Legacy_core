// these functions are basically for ScaleScriptBasicLib(SSBLib)
//but you can use these functions into your own commands as far as your Package contains SSBLib.



SS_funcgroup("SScmdPackage functions",{

	__fn get_SScmdPackage_info $targstr $LINKstr {
		targstr.asg "" //init targstr
		GIVE_METAVAR2BLOCK
		
		
	}


})





__fn func_SS_cmd_help $cmd {
	
}


__fn func_SS_echo $string {
	
}

__fn func_eval $formula {
	//just give formula to Maniacs eval() function
	@raw 10220 $formula
}




__fn cmd_systemctl $order $argv1 {
	str_SSreg1.asg $order
	@if str_SSreg1.eq "shutdown" {
		//shutdown the game
		@sys.shutdown

	}.elif str_SSreg1.eq "poweroff" {
		//shutdown the game
		@sys.shutdown

	}.elif str_SSreg1.eq "reset" {
		//reset the game
		@sys.reset

	}.elif str_SSreg1.eq "gameover" {
		//call gameover scene
		@sys.gameover

	}.elif str_SSreg1.eq "save" {
		//save slot
		@if $argv1 > 0 {
			@save.save[$argv1] .res(SSreg1)
			
		}.else bl {
			SS_errlog("Error:systemctl save - invalit save slot selected.")
		}

	}.elif str_SSreg1.eq "load" {
		//load slot
		@if $argv1 > 0 {
			@save.load[$argv1]
			
		}.else bl {
			SS_errlog("Error:systemctl load - invalit save slot selected.")
		}

	}.elif str_SSreg1.eq "partymenu" {
		@sys.partyMenu

	}.else bl { // undefined
		str_SSreg1.asg .cat("Error:systemctl - undefined command verb ",str_SSreg1,"")
		SSreturn_system_string(str_SSreg1)
		SS_system_popup(str_SSsystem)
	}

def SScmd_systemctl_args0_dict = "shutdown;poweroff;reset;gameover;save;load;partymenu;"

}

__fn cmd_RMget $order $argv1 $argv2 {
	str_SSreg1.asg $order
	@if str_SSreg1.eq "item" {
		@if $argv2 >= 0 {
			@party.item[$argv1].add($argv2)
		}.else bl{
			SSreg1 = $argv2 * -1
			@party.item[$argv1].sub(SSreg1)
		}


	}.elif str_SSreg1.eq "money" {
		@if $argv2 >= 0 {
			@party.money .add($argv1)
		}.else bl{
			SSreg1 = $argv1 * -1
			@party.money .sub(SSreg1)
		}


	}.else bl { // undefined
		str_SSreg1.asg .cat("Error:RMget - undefined command verb ",str_SSreg1,"")
		SSreturn_system_string(str_SSreg1)
		SS_system_popup(str_SSsystem)
	}

def SScmd_RMget_args0_dict = "item;money;"

}

//pic command
__fn cmd_picture_control $order $argv1 $argv2 $argv3 {
	str_SSreg1.asg $order
	@if str_SSreg1.eq "export" {
		@if $argv2 >= 1 {
			str_SSreg1.asg SS_picture_export_path
			str_SSreg1.cat $argv3
			@img.save .pic $argv2 .static .dst str_SSreg1
		}.else bl{ //invaild PicID

		}


	}.else bl { // undefined
		str_SSreg1.asg .cat("Error:pic - undefined command verb ",str_SSreg1,"")
		SSreturn_system_string(str_SSreg1)
		SS_system_popup(str_SSsystem)
	}

def SScmd_pic_args0_dict = "export;load;"

}



//tpcrep
//str targetfile,str sourcefile, str mode
//reg1 replaced amount?
__fn cmd_tpc_support_replace $target $source $mode {

	//need to make difference when it's called on console or not I guess?



	str_SSreg1.asg .file($source) .utf8 //get source text
	str_remove_comment_out(__id(str_SSreg1)) //remove comment out
	str_SSreg3.asg .file($target) .utf8 //get target text
	
	//@msg.show $givenstring str_SSreg1 
	//@msg.show $givenstring str_SSreg3 
	// var1 = current_index
	// var2 = next_index
	// var9 = mode_get_from_source
	var1 = 0
	var2 = 0

	//$ptr_target_str
	@loop .inf() {
		var1 = var2
		str_SSreg1 .inStr "def" var2 .beg(var1) 
		@if var2 == -1 {
			@break

		} .else bl {
			var2 += 3 //check what is the fourth char
			str_get_char(str_SSreg2,str_SSreg1,var2) // get what type of def to SSreg1
			@if `str_SSreg2.eq "v" { //defv
				var9 = 1

			}.elif str_SSreg2.eq "t" { //deft
				var9 = 2

			}.elif str_SSreg2.eq "s" { // defs
				var9 = 3

			}.elif str_SSreg2.eq " " { // def
				var9 = 0

			}.else bl { //?
				var9 = -1

			}


			@if var9 > 0 { //temporary
				//get LF
				str_SSreg1 .inStr (SS_LF,var3,.beg(var2))

				//get {
				str_SSreg1 .inStr ("{",var4,.beg(var2))
				@if `var3 == -1 || var4 == -1 { // checking the last line OR no "{" anymore
					str_SSreg1 .exInStr ("\w",var3,.beg(var2)) // try to hit a char
					macro_replace_defseries

				} .elif var3 < var4 { // this line has no "{"
					str_SSreg1 .exInStr ("\w",var3,.beg(var2)) // try to hit a char
					macro_replace_defseries

				} .else bl { // start loop
					var2 = var4 // set index to "{"
					str_SSreg1 .inStr ("}",var6,.beg(var2)) //use var6 as index of "}"
					@if var6 != -1 { 
						@loop bl {
							
							str_SSreg1 .exInStr ("\w",var3,.beg(var2)) // try to hit a char
							@if `var3 == -1 || var3 >= var6 {
								@break

							}
							macro_replace_defseries
						}
						var2 = var6 //next try starts from "}"

					}.else bl { // hey this block has no end!
					@break
					
					}
				}
			}
		}
	}
	str_SSreg3.toFile("exportino".utf8)

}

// idk why but something is utterly broken in this macro..
// this doesn't replace items at all

def macro_replace_defseries = {
	// str_SSreg5 = pat
	// str_SSreg4 = sub
	@if var3 != -1 {
		str_SSreg1 .inStr (SS_LF,var2,.beg(var2))
	}.else bl {
		str_SSreg1 .exinStr ("$",var2,.beg(var2))

	}
	@if var2 == -1  {@break 2} // <-?
	// get {word} = ?
	// use var5 this time as an number of char
	var5 = var2 - var3
	@if var5 > 0 {
		// get one line
		str_SSreg4.asg .subs(str_SSreg1, var3, var5)
		// kill space
		str_SSreg4.asg .rep(str_SSreg4, " ", "")
		// then split by "="
		str_SSreg4.split("=", str_SSreg4, var4) // throw garbage to var4
		@if var4 == 2{
			// set up pattern
			str_SSreg5.asg .cat("\[",str_SSreg5,"\]")
			str_SSreg5.asg .cat("[^\/]", str_SSreg2, str_SSreg5)
			str_SSreg3.asg .exrep(str_SSreg3, str_SSreg5, str_SSreg4)
		}.else bl { //something is wrong
			@break

		}
	}
}
