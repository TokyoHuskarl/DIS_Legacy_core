
def JSCMD_INITPATH = __str("RTS.path.initPath_list(getv(", Adr_PlayerSelectList_Head, ",\v[", __id(SelectedAmount) ,"]))")

__fn func_control_moveorder_civ {
	eval_js(JSCMD_INITPATH)
		v[391] = s[40] == 1 ? var1 : MousePtr_x
		v[392] = s[40] == 1 ? var2 : MousePtr_y
		v[202] = 101
		s[201].off
		s[203].off
		s[21].off
		@if v[v[202]] > 0 {
			@comment "#味方イベントで重なってるやつを検索"
				@if s[40] .isOff() {
					Temp5 = 0
						MousePtr_x.copy var1, 2
						@call .cev 2002
						Temp2 = v[4533]
						@doWhile v[Temp2] >= 1 {
							Temp3 = v[Temp2] * 300
								Temp3 += 4800
								@if v[Temp2] != v[101] {
									@if v[Temp3] == 0 {
										Temp3 -= 93
											s[202].off
											@if s[201] .isOff() {
												v[Temp3].copy v[607], 5
													@call .cev 1910
													@if s[202] .isOn() {
														@comment "#指定された"
															Temp4 = v[Temp2] * 300 + 4701
															TT1 = v[Temp4] > 0 ? 1 : 0
															TT1 += v[Temp4] != 11 ? 1 : 0
															@if TT1 == 2 {

															} .else bl {
																Temp3 = Temp3 + 17
																	v[Temp3] = -1
																	@if Temp5 == 0 {
																		@comment "STATIC保存しておく"
																			Temp5 = v[Temp2]

																	} .else bl {
																		@comment "STATIC保存があるのにStatic見たらスルー"
																			Temp3 = Temp3 + 17
																			v[Temp3] = 1

																	}

															}

													} .else bl {
														Temp3 = Temp3 + 17
															v[Temp3] = v[Temp3] != 0 ? 1 : 0

													}

											} .else bl {
												Temp3 = Temp3 + 17
													v[Temp3] = 1

											}

									}

								}
							Temp2 += 1

						}

					@if Temp5 <= 0 {
						Temp2 = v[1145]
							@doWhile v[Temp2] >= 1 {
								Temp3 = v[Temp2] * 300
									Temp3 += 4800
									@if v[Temp3] == 0 {
										Temp3 -= 93
											s[202].off
											@if s[201] .isOff() {
												v[Temp3].copy v[607], 5
													@call .cev 1910
													@if s[202] .isOn() {
														@comment "#指定された"
															Temp4 = v[Temp2] * 300 + 4701
															TT1 = v[Temp4] > 0 ? 1 : 0
															TT1 += v[Temp4 + 101] == 5 ? 1 : 0
															@if TT1 == 2 {
																Temp3 = Temp3 + 17
																	v[Temp3] = -1
																	v[100] = v[Temp2]
																	s[201].on
																	@comment "非STATICを見た"
																	s[203].on
																	@comment "STATIC保存しておく"
																	Temp5 = v[Temp2]
																	@break

															}

													} .else bl {
														Temp3 = Temp3 + 17
															v[Temp3] = v[Temp3] != 0 ? 1 : 0

													}

											} .else bl {
												Temp3 = Temp3 + 17
													v[Temp3] = 1

											}

									}
								Temp2 += 1

							}


					}
					v[379] = 0
						@comment "かつSTATICをひとつ見ている"
						@if Temp5 >= 1 {
							@comment "非STATICを見てない"
								@if s[203] .isOff() {
									v[100] = Temp5
										Temp3 = v[100] * 300
										Temp3 += 4724
										v[Temp3] = -1
										@comment "Basement?"
										v[379] = v[v[100] * 300 + 4802] == 104 ? 1 : 0
										@if v[379] == 0 {
											v[379] = v[v[100] * 300 + 4802] == 105 ? 0 : 2

										}
									s[201].on

								} .else bl {
									v[100] = Temp5
										Temp3 = v[100] * 300
										Temp3 += 4724
										v[Temp3] = -1
										@comment "Siege?"
										v[379] = v[v[100] * 300 + 4802] == 5 ? 2 : 0
										s[201].on

								}

						}
					@if s[201] .isOff() {
						@if s[40] .isOff() {
							Temp5 = 0
								Temp2 = v[1146]
								@doWhile v[Temp2] >= 1 {
									@if `s[2000 + v[Temp2]] == 1 {
										Temp3 = v[Temp2] * 300
											Temp3 += 4707
											s[202].off
											@if s[201] .isOff() {
												v[Temp3].copy v[607], 5
													@call .cev 1910
													@if s[202] .isOn() {
														@comment "#指定された"
															Temp3 = Temp3 + 17
															v[Temp3] = -1
															Temp4 = v[Temp2] * 300 + 4701
															TT1 = v[Temp4] > 0 ? 1 : 0
															TT1 += v[Temp4] != 11 ? 1 : 0
															@if TT1 == 2 {
																v[100] = v[Temp2]
																	s[201].on
																	@comment "非STATICを見た"
																	s[203].on

															} .else bl {
																@if Temp5 == 0 {
																	@comment "STATIC保存しておく"
																		Temp5 = v[Temp2]

																} .else bl {
																	@comment "STATIC保存があるのにStatic見たらスルー"
																		Temp3 = Temp3 + 17
																		v[Temp3] = 2

																}

															}

													} .else bl {
														Temp3 = Temp3 + 17
															v[Temp3] = 2

													}

											} .else bl {
												Temp3 = Temp3 + 17
													v[Temp3] = 2

											}

									}
									Temp2 += 1

								}

							@comment "非STATICを見てない"
								@if s[203] .isOff() {
									@comment "かつSTATICをひとつ見ている"
										@if Temp5 >= 1 {
											v[100] = Temp5
												Temp3 = v[100] * 300
												Temp3 += 4724
												v[Temp3] = -1
												s[201].on

										}

								}
							@if s[201] .isOff() {
								Temp5 = 0
									Temp2 = v[4533]
									@comment "#StaticCk... in order to target walls"
									@doWhile v[Temp2] >= 1 {
										@if `s[2000 + v[Temp2]] == 1 {
											Temp3 = v[Temp2] * 300
												Temp3 += 4707
												s[202].off
												@if s[201] .isOff() {
													v[Temp3].copy v[607], 5
														@call .cev 1910
														@if s[202] .isOn() {
															Temp4 = v[Temp2] * 300 + 4701
																@if v[Temp4] > 0 {
																	@if `v[Temp4 + 99] % 3 == 1 {
																		Temp3 = Temp3 + 17
																			v[Temp3] = -1
																			v[100] = v[Temp2]
																			s[201].on
																			@break

																	}

																}

														}

												}

										}
										Temp2 += 1

									}


							}

						}

					}
					@comment "#####################
						direction"
						@loop 40 .dst Temp1 {
							Temp1 = v[v[202] + Temp1]
								@if v[Temp1] >= 1 {
									Temp1 *= v[1117]
										Temp1 += 4700
										Ptr19 = Temp1 + 1
										@if v[Ptr19] > 0 {
											Temp15 += 1
												Ptr20 = Temp1 + 7
												v[Ptr20].copy Temp13, 2
												TT1 = v[391]
												TT2 = v[392]
												TT1 .sub Temp13, 2
												v[Temp1 + 56] = atan2(TT2, TT1, 1000)

										}

								} .else bl {
									@break

								}

						}


				}
			@if v[275] >= 1 {
				@comment "WPをとおる"
					v[263].copy v[261], 2
					v[265].copy v[263], 2
					v[267].copy v[265], 2
					v[269].copy v[267], 2
					v[271].copy v[269], 2
					v[273].copy v[271], 2
					@comment "#Set 移動するX"
					@comment "#Set 移動するY"
					v[391].copy v[273], 2
					s[15].on

			}
			@if s[201] .isOn() {
				@comment "労働指示"
					@loop .inf() {
						@if v[v[202]] == 0 {
							@comment "とぎれた"
								@break

						}
						@if v[202] >= v[1007] {
							@comment "とりあえず40体までしか選択できない"
								@break

						}
						@comment "配列ゲット"
							Temp1 = v[v[202]] * 300
							Temp1 += 4700
							Ptr20 = Temp1 + 242
							Ptr19 = Temp1 + 19
							Ptr18 = Temp1 + 20
							Ptr17 = Temp1 + 18
							Ptr16 = Temp1 + 241
							Ptr15 = Temp1 + 242
							Ptr14 = Temp1 + 55
							v[Temp1 + 34] &= ~4096
							v[Temp1 + 34] &= AI_routine_bits_MASK_for_initilizing_pathfinding
							@comment "#######"
							@comment "処理開始"
							v[Ptr16] = v[Ptr16] != 4 ? 2 : 4
							@if v[275] >= 1 {
								Ptr13 = 273
									Ptr13 -= v[275] * 2
									Ptr19 = Temp1 + 41
									@loop v[275] {
										v[Ptr13].copy v[Ptr19], 2
											Ptr13 += 2
											Ptr19 += 2

									}

								v[Ptr13].copy v[Ptr19], 2
									@comment "#Set 現在目指してるWPと総WP数"
									v[Ptr14] = v[275]
									v[Ptr15] = 3
									v[Ptr15] = 2

							} .else bl {
								v[Ptr14] = -1
									@comment "#Set 移動するX"
									v[Ptr19] = v[391]
									@comment "#Set 移動するY"
									v[Ptr18] = v[392]
									@comment "#Set 現在目指してるWPと総WP数"
									v[Ptr15] = 2
									Ptr19 = Temp1 + 41
									v[391].copy v[Ptr19], 2
									v[Temp1 + 34] |= AI_routine_bits_FLAG_RayCast // set raycast anyway

							}
						@comment "#Set Target"
							v[Ptr17] = v[100]
							@comment "#assign job free"
							Ptr13 = Temp1 + 247
							@comment "#If basement selected"
							@if v[379] == 1 {
								@comment "#set buildingjob "
									v[Ptr13] = 5

							}
						@if v[379] == 2 {
							@comment "#set repairing job"
								v[Ptr13] = 6

						}
						@comment "#Set Direｃ"
							Ptr13 = Temp1 + 245
							v[Ptr13] = 0
							@comment "処理終わり"
							v[202] += 1

					}


			} .else bl {
				@comment "移動指示"
					@loop .inf() {
						@if v[v[202]] == 0 {
							@comment "とぎれた"
								@break

						}
						@if v[202] > v[1007] {
							@comment "とりあえず40体までしか選択できない"
								@break

						}
						@comment "配列ゲット"
							Temp1 = v[v[202]] * 300
							Temp1 += 4700
							Ptr20 = Temp1 + 242
							Ptr19 = Temp1 + 41
							Ptr18 = Temp1 + 42
							Ptr17 = Temp1 + 18
							Ptr15 = Temp1 + 241
							Ptr14 = Temp1 + 55
							@comment "#assign job free"
							Ptr13 = Temp1 + 247
							v[Ptr13] = 0
							v[Temp1 + 34] &= AI_routine_bits_MASK_for_initilizing_pathfinding

							@if s[1] .isOn() {
								Ptr13 = Temp1 + 247
									v[Ptr13] = 0

							}
						v[Temp1 + 34] &= ~4096
							@if `v[Temp1 + 1] != 11 {
								@comment "処理開始"
									v[Ptr20] = s[16] == 1 ? 2 : 3
									@comment "#アタックムーブじゃなければActionチェック"
									v[843] = Temp1 + 243
									TT1 = s[16] != 1 ? v[v[843]] : -999
									@comment "#if Action==Attack, Set Action 0"
									v[v[843]] = TT1 == 1 ? 0 : v[v[843]]
									v[629] = Temp1 + 29
									@comment "#if Forcemove, AA MotionTimer Reset"
									v[v[629]] = TT1 == 1 ? 0 : v[v[629]]
									@comment "#if Attack Stance, set stance alert"
									v[Ptr15] = v[Ptr15] == 2 ? 0 : v[Ptr15]

							}
						@if v[275] >= 1 {
							Ptr13 = 273
								Ptr13 -= v[275] * 2
								@loop v[275] {
									v[Ptr13].copy v[Ptr19], 2
										Ptr13 += 2
										Ptr19 += 2

								}

							v[Ptr13].copy v[Ptr19], 2
								@comment "#Set 現在目指してるWPと総WP数"
								v[Ptr14] = v[275]

						} .else bl {
							v[Temp1 + 34] &= ~(8388608 + 8192)
								@if s[40] .isOn() {
									v[Temp1 + 34] |= 16384

								} .else bl {
									v[Temp1 + 34] &= ~32768

								}
							@comment "#Set 移動するX"
								v[Ptr19] = v[391]
								@comment "#Set 移動するY"
								v[Ptr18] = v[392]
								@comment "#Set 現在目指してるWPと総WP数"
								v[Ptr14] = -1
								v[Temp1 + 34] |= AI_routine_bits_FLAG_RayCast // set raycast anyway
						}
						@comment "#Set 目標なし"
							v[Ptr17] = 0
							Ptr13 = Temp1 + 245
							v[Ptr13] = 0
							@comment "処理終わり"
							s[21].on
							v[202] += 1

					}


			}
			@if s[201] .isOn() {
				@if s[13] .isOff() {
					@comment "#########################"
						v[472] = divmul(95, 100, v[2216])
						@se.play "Cursor1" .opt v[472], 65, 50
						@comment "#########################"

				}
				@call .cev 48
					MousePtr_x.copy Temp2, 2
					Temp3 -= 6
					Temp2 += 5
					@pic[999].show {
						"pointer_hammer"
							.pos Temp2, Temp3 .center
							.scrollWithMap
							.chromakey 1
							.scale 100
							.trans 0
							.rgbs 100, 100, 100, 100
							.grid 3, 1 .anim 5 .repeat
							.mapLayer 10
							.eraseWhenTransfer
							.affectedByFlash
							.affectedByShake
					}
				Temp3 += 10
					@pic[999].move {
						.pos Temp2, Temp3 .center
							.scale 100
							.trans 100
							.time 5
							.rgbs 100, 100, 100, 100
					}

			}
			@if s[21] .isOn() {
				@if s[13] .isOff() {
					@comment "#########################"
						v[472] = divmul(95, 100, v[2216])
						@se.play "ui\tap" .opt v[472], 100, 50
						@comment "#########################"

				}
				MousePtr_x.copy Temp2, 2
					Temp3 -= 6
					Temp2 += s[40] == 0 ? 5 : 1
					Temp4 = s[40] == 0 ? 100 : 50
					@if s[16] .isOn() {
						@pic[999].show {
							"pointer_attackmove"
								.pos Temp2, Temp3 .center
								.scrollWithMap
								.chromakey 1
								.scale Temp4
								.trans 0
								.rgbs 100, 100, 100, 100
								.grid 3, 1 .anim 5 .repeat
								.mapLayer 10
								.eraseWhenTransfer
								.affectedByFlash
								.affectedByShake
						}

					} .else bl {
						@pic[999].show {
							"pointer_flag"
								.pos Temp2, Temp3 .center
								.scrollWithMap
								.chromakey 1
								.scale Temp4
								.trans 0
								.rgbs 100, 100, 100, 100
								.grid 3, 1 .anim 5 .repeat
								.mapLayer 10
								.eraseWhenTransfer
								.affectedByFlash
								.affectedByShake
						}

					}
				Temp3 += s[40] == 0 ? 10 : 0
					@pic[999].move {
						.pos Temp2, Temp3 .center
							.scale Temp4
							.trans 100
							.time 5
							.rgbs 100, 100, 100, 100
					}

			}

		}
	v[261..280] = 0
		s[201].off
		s[16].off
}


__fn func_control_moveorder_mil {

	eval_js(JSCMD_INITPATH)


		s[163].off
		@if v[943] >= 1 {
			s[112].on

		}
	@if s[13] .isOff() {

	}
	// "Init Form info"
	v[0] = v[341..342] = [v[1165], v[1165] + 39]
		@pic[TT1..TT2].erase
		v[38] = v[v[v[Adr_PlayerSelectList_Head]] * 300 + 4944]
		@call .cev 1897
		// "TempS1"
		v[391] = s[40] == 1 ? var1 : MousePtr_x
		v[392] = s[40] == 1 ? var2 : MousePtr_y
		MousePtr_x.copy v[405], 2
		v[391].copy v[489], 2
		v[202] = Adr_PlayerSelectList_Head
		s[201].off
		s[203].off
		s[21].off
		@if v[v[202]] > 0 {

			// check if overlapped agent exists
			@if Control_ClickableAgentHolder > 0 { 
				TT1 = Control_ClickableAgentHolder * agent_Basic_Array_size
					TT1 += 4800
					TT1 == v[TT1] % 3
			}.else bl{
				TT1 = -1
			}

			@if TT1 == 1 { // if overlapped agent is enemy
				v[100] = Control_ClickableAgentHolder // just pick it up as a target
					s[201].on

			}.else bl { // classic way to find enemy unit

				// "#敵イベントで重なってるやつを検索"
				@if s[40] .isOff() {
					Temp5 = 0
						Temp2 = v[1146]
						@doWhile v[Temp2] >= 1 {
							@if `s[2000 + v[Temp2]] == 1 {
								Temp3 = v[Temp2] * 300
									Temp3 += 4707
									s[202].off
									@if s[201] .isOff() {
										v[Temp3].copy v[607], 5
											@call .cev 1910
											@if s[202] .isOn() {
												// "#指定された"
												Temp3 = Temp3 + 17
													v[Temp3] = -1
													Temp4 = v[Temp2] * 300 + 4701
													TT1 = v[Temp4] > 0 ? 1 : 0
													TT1 += v[Temp4] != 11 ? 1 : 0
													@if TT1 == 2 {
														v[100] = v[Temp2]
															s[201].on
															// "非STATICを見た"
															s[203].on

													} .else bl {
														@if Temp5 == 0 {
															// "STATIC保存しておく"
															Temp5 = v[Temp2]

														} .else bl {
															// "STATIC保存があるのにStatic見たらスルー"
															Temp3 = Temp3 + 17
																v[Temp3] = 2

														}

													}

											} .else bl {
												Temp3 = Temp3 + 17
													v[Temp3] = 2

											}

									} .else bl {
										Temp3 = Temp3 + 17
											v[Temp3] = 2

									}

							}
							Temp2 += 1

						}

					// "非STATICを見てない"
					@if s[203] .isOff() {
						// "かつSTATICをひとつ見ている"
						@if Temp5 >= 1 {
							v[100] = Temp5
								Temp3 = v[100] * 300
								Temp3 += 4724
								v[Temp3] = -1
								s[201].on

						}

					}
					@if s[201] .isOff() {
						Temp5 = 0
							Temp2 = v[4533]
							// "#StaticCk... in order to target walls"
							@doWhile v[Temp2] >= 1 {
								@if `s[2000 + v[Temp2]] == 1 {
									Temp3 = v[Temp2] * 300
										Temp3 += 4707
										s[202].off
										@if s[201] .isOff() {
											v[Temp3].copy v[607], 5
												@call .cev 1910
												@if s[202] .isOn() {
													Temp4 = v[Temp2] * 300 + 4701
														@if v[Temp4] > 0 {
															@if `v[Temp4 + 99] % 3 == 1 {
																Temp3 = Temp3 + 17
																	v[Temp3] = -1
																	v[100] = v[Temp2]
																	s[201].on
																	@break

															}

														}

												}

										}

								}
								Temp2 += 1

							}


					}

				}
			}
			@if s[163] .isOff() {
				// "攻撃しないなら陣形を組もうとする"
				@if s[201] .isOff() {
					// "Order DirectionEnd"
					v[393..398] = 0
						v[399] = 8888
						v[400] = 1
						v[2809..2810] = 0
						@if s[27] .isOff() {
							@if v[99] > 1 {
								// "Order Direction"
								// "一体以上いる"
								v[202] = 101
									v[313..315] = 0
									v[491] = 0
									@loop v[1004] .dst v[401] {
										@if v[v[202]] == 0 {
											// "とぎれた"
											@break

										}
										@if v[401] > 40 {
											// "とりあえず40体までしか選択できない"
											@break

										}
										// "配列ゲット"
										Temp1 = v[v[202]] * v[1117]
											Temp1 += 4700
											Ptr19 = Temp1 + 1
											// "＃生きてる？"
											@if v[Ptr19] > 0 {
												Temp15 += 1
													Ptr20 = Temp1 + 7
													v[Ptr20].copy Temp11, 2
													// "処理開始"
													Temp13 .add Temp11, 2
													v[491] += v[Temp1 + 10]

											}
										@if s[1] .isOn() {
											TT1 = v[v[202]] + 500
												@if s[TT1] .isOn() {
													s[112].off

												}

										}
										v[202] += 1

									}

								v[491] /= Temp15
									v[313..314] /= Temp15
									TT1 = v[391]
									TT2 = v[392]
									TT1 .sub Temp13, 2
									v[388..389] = atan2(TT2, TT1, 1000)
									v[388..389] = Temp15 > 0 ? atan2(TT2, TT1, 1000) : 0


									// control rank loop
									@loop .inf() {
										@label.set 10
											v[489].copy v[391], 2
											Mouse_x.copy MousePtr_x, 2
											@if v[47] > 0 {
												v[41] = Mouse_x - 1
													v[48] = Mouse_y - 1
													v[47] -= 1

											} .else bl {
												v[41] = Mouse_x
													v[48] = Mouse_y

											}
										@pic[1000].show {
											t[522]
												.pos v[41], v[48] .center
												.chromakey 1
												.scale 100
												.trans 0
												.rgbs 100, 100, 100, 100
												.mapLayer 10
												.eraseWhenTransfer
												.affectedByFlash
												.affectedByShake
										}
										@if s[2] .isOn() {
											@if s[4] .isOn() {
												@pic[1000].show {
													t[522]
														.pos v[41], v[48] .center
														.chromakey 1
														.scale 100
														.trans 0
														.rgbs 200, 60, 60, 50
														.mapLayer 10
														.eraseWhenTransfer
														.affectedByFlash
														.affectedByShake
												}

											}

										}
										s[43].on
											@if s[40] .isOff() {
												@pic[999].show {
													"ui\direction_mouse"
														.pos v[391], v[392] .center
														.scrollWithMap
														.chromakey 1
														.scale 100
														.trans 20
														.rgbs 100, 100, 100, 100
														.angle v[389], 1000
														.mapLayer 10
														.eraseWhenTransfer
														.affectedByFlash
														.affectedByShake
												}

											} .else bl {
												@pic[999].show {
													"ui\direction_mouse"
														.pos v[407], v[408] .center
														.scrollWithMap
														.chromakey 1
														.scale 50
														.trans 0
														.rgbs 100, 100, 100, 100
														.angle v[389], 1000
														.mapLayer 10
														.eraseWhenTransfer
														.affectedByFlash
														.affectedByShake
												}

											}
										// "#そのうち整理"
										@key.input .dst Common_Control_Ck {
												.rclick
										}

										// check if right drag is over
										@if Common_Control_Ck != 1006 {
											@if s[205] .isOff() {
												@pic[999].erase
													s[201].off
													s[43].off
													v[202] = 101
													@if v[82] >= 1 {
														@if v[82] <= 10 {
															v[v[4530] + (v[82] - 1) * 20 + 11] = v[427]
																v[v[4530] + (v[82] - 1) * 20 + 12] = v[489] - v[403]
																v[v[4530] + (v[82] - 1) * 20 + 13] = v[490] - v[404]
																v[v[4530] + (v[82] - 1) * 20 + 14] = v[389]
																v[v[4530] + (v[82] - 1) * 20 + 15] = v[491]
																@if s[16] .isOff() {
																	v[v[4530] + (v[82] - 1) * 20 + 4] &= ~4

																}

														}

													}
												// then break
												@break

											}

										}


										@if `MousePtr_x == v[405] && MousePtr_y == v[406] {

										} .else bl {
											@if s[40] .isOff() {
												TT1 = MousePtr_x - v[391]
													TT2 = MousePtr_y - v[392]

											} .else bl {
												TT1 = MousePtr_x - v[407]
													TT2 = MousePtr_y - v[408]

											}
											v[389] = atan2(TT2, TT1, 1000)

										}
										// "################experimental"
										@if s[40] .isOff() {
											v[202] = 101
												v[390] = 0
												// "列数設定"
												var1 = v[427]
												var7 = v[99]
												@call .cev 1762
												v[400] = reg1
												// "一列の長さを決定"
												// "仮置き、そのうちなおす"
												v[399] = v[99]
												v[399] /= v[400]
												TT1 = v[399] % 2
												v[399] = v[99]
												v[399] += v[99] > 6 ? 1 : 0
												v[399] /= v[400]
												// ""
												v[391..392] *= 1000
												v[393..394] = muldiv(v[399], v[1148] + max(v[491] - 12, 0), 2)
												v[393] *= sin(v[389], 1000, -1000)
												v[394] *= cos(v[389], 1000, 1000)
												v[393].copy v[395], 2
												v[391] .sub v[393], 2
												v[395..396] /= v[399] / 2
												v[397] = cos(90, 1, 1000) * v[395] - sin(90, 1, 1000) * v[396]
												v[398] = sin(90, 1, 1000) * v[395] + cos(90, 1, 1000) * v[396]
												v[397..398] /= 1000
												// "仮置き、そのうちなおす"
												// "中心をあわせるため1単位ずらす"
												@if TT1 == 0 {
													v[395..396] /= 2
														v[391] .add v[395], 2
														v[395..396] *= 2

												} .else bl {
													v[395..396] /= 4
														v[391] .add v[395], 2
														v[395..396] *= 4

												}
											v[391].copy v[393], 2
												@loop v[1004] .dst v[340] {
													@if v[v[202]] == 0 {
														// "とぎれた"
														@break

													}
													@if v[202] > v[1007] {
														// "とりあえず40体までしか選択できない"
														@break

													}
													// "配列ゲット"
													// "処理開始"
													v[391].copy v[361], 2
														v[391] .add v[395], 2
														// "Formation Indicator"
														@if v[99] > 1 {
															v[361..362] /= 1000
																TT1 = v[1165] + v[340]
																@pic[TT1].show {
																	"ui\direction_indicator"
																		.pos v[361], v[362] .center
																		.scrollWithMap
																		.chromakey 1
																		.scale 100
																		.trans 35
																		.rgbs 100, 100, 100, 100
																		.angle v[389], 1000
																		.mapLayer 4
																		.eraseWhenTransfer
																		.affectedByFlash
																		.affectedByShake
																}

														}
													// "Make 2nd line"
													v[390] += 1
														v[390] %= v[399]
														@if v[390] == 0 {
															v[393].copy v[391], 2
																v[391] .add v[397], 2
																v[391].copy v[393], 2

														}
													// "処理終わり"
													v[202] += 1

												}


										}
										@key.input .dst v[428] {
											.lclick
												.wheelDown
												.wheelUp
										}
										@if v[428] == 1001 {
											s[205].on
												@loop .inf() {
													@if v[427] <= 0 {
														@break

													}
													var1 = v[427]
														@call .cev 1762
														reg2 = reg1
														v[427] -= 1
														var1 = v[427]
														@call .cev 1762
														@if reg1 != reg2 {
															v[472] = divmul(70, 100, v[2216])
																@se.play "click1" .opt v[472], 150, 50
																v[400] = reg1
																@break

														}

												}


										}
										@if v[428] == 1004 {
											s[205].on
												@loop .inf() {
													@if v[427] >= 4 {
														@break

													}
													var1 = v[427]
														@call .cev 1762
														reg2 = reg1
														v[427] += 1
														var1 = v[427]
														@call .cev 1762
														@if reg1 != reg2 {
															v[472] = divmul(70, 100, v[2216])
																@se.play "click1" .opt v[472], 150, 50
																v[400] = reg1
																@break

														}

												}


										}
										@if v[428] == 1005 {
											@pic[999].erase
												s[201].off
												s[43].off
												v[202] = 101
												v[0] = v[341..342] = [v[1165], v[1165] + 39]
												@pic[TT1..TT2].erase
												@ev.abort

										}
										
										s[205].off
											@wait 0

									}

								v[489].copy v[391], 2
									v[202] = 101
									// "列数設定"
									var1 = v[427]
									var7 = v[99]
									@call .cev 1762
									v[400] = reg1
									// "一列の長さを決定"
									// "仮置き、そのうちなおす"
									v[399] = v[99]
									v[399] /= v[400]
									TT1 = v[399] % 2
									v[399] = v[99]
									v[399] += v[99] > 6 ? 1 : 0
									v[399] /= v[400]
									// ""
									v[393..394] = muldiv(v[399], v[1148] + max(v[491] - 12, 0), 2)
									v[393] *= sin(v[389], 1000, -1000)
									v[394] *= cos(v[389], 1000, 1000)
									v[393].copy v[395], 2
									v[393..394] /= 1000
									v[391] .sub v[393], 2
									v[395..396] /= v[399] / 2
									v[395..396] /= 1000
									v[397] = cos(90, 1, 1000) * v[395] - sin(90, 1, 1000) * v[396]
									v[398] = sin(90, 1, 1000) * v[395] + cos(90, 1, 1000) * v[396]
									v[397..398] /= 1000
									// "仮置き、そのうちなおす"
									// "中心をあわせるため1単位ずらす"
									@if TT1 == 0 {
										v[395..396] /= 2
											v[391] .add v[395], 2
											v[395..396] *= 2

									} .else bl {
										v[395..396] /= 4
											v[391] .add v[395], 2
											v[395..396] *= 4

									}
								v[391].copy v[393], 2
									// "###########################Get Lv Median"


									// Temp2 = {agentid} * 300 before calling this function
									__fn cont_rank_set_agent_priority {
											Temp2 += 4804
											Temp3 = v[Temp2] * 100
											Temp2 -= 2
											// "Infs tends to go frontal side *100"
											Temp3 *= v[Temp2] == 0 ? 5 : 1
											// "Cavs"
											Temp3 *= v[Temp2] == 2 ? 3 : 1
											// "Shieldwall"
											Temp3 *= v[Temp2 + 146] & 6 ? 10 : 1
											// "Pikewall"
											Temp3 *= v[Temp2 + 146] & 1 ? 5 : 1
									}

									@loop v[99] .dst TT3 {
										Temp1 = 101 + TT3
											Temp2 = v[Temp1] * 300
											cont_rank_set_agent_priority()

											v[601 + TT3] = Temp3

									}

								v[601].sort v[99]
									Temp4 = v[601 + v[99] / 2 - v[399] / 2]
									Temp4 = v[601 + v[99] / (v[99] / v[399]) / 2]
									// "###########################descending sort"
									Temp5 = 0
									@loop v[99] .dst TT3 {
										Temp1 = 101 + TT3
											Temp2 = v[Temp1] * 300
											// "Save ordered direction"
											v[Temp2 + 4756] = v[389]
											@if `v[Temp2 + 4974] & 1048576 {
												// "Give median to Bannerman"
												Temp3 = Temp4
													Temp3 += v[99] / 2 / (v[99] / v[399]) - v[99] % v[399]
													Temp3 *= 1000
													v[Temp1] += Temp3
													// "Save bannerman"
													Temp5 = v[Temp1]

											} .else bl {
													cont_rank_set_agent_priority()
													Temp3 += v[Temp1]
													Temp3 *= 1000
													v[Temp1] += Temp3

											}

									}

								v[101].sortDescending v[99]
									@if Temp5 > 0 {
										@loop v[99] .dst TT3 {
											Temp1 = 101 + TT3
												@if v[Temp1] == Temp5 {
													Temp6 = 100 + v[99] - (v[99] / (v[99] / v[399]) - v[399] / 2 + v[99] % v[399] / 2 - v[399] % 2)
														v[Temp1].swap v[Temp6], 1
														@break

												}

										}


									}
								v[101..140] %= 1000
									@call .cev 1897

							} .else bl {
								Temp1 = v[v[202]] * v[1117]
									Temp1 += 4700
									Ptr19 = Temp1 + 1
									// "＃生きてる？"
									@if v[Ptr19] > 0 {
										Temp15 += 1
											Ptr20 = Temp1 + 7
											v[Ptr20].copy Temp13, 2
											TT1 = v[391]
											TT2 = v[392]
											TT1 .sub Temp13, 2
											v[Temp1 + 56] = atan2(TT2, TT1, 1000)

									}

							}

						}

				}




				@if LEGV_WPamount_to_set >= 1 {
					// "WPをとおる"
					v[263].copy v[261], 2
						v[265].copy v[263], 2
						v[267].copy v[265], 2
						v[269].copy v[267], 2
						v[271].copy v[269], 2
						v[273].copy v[271], 2
						// "#Set 移動するX"
						// "#Set 移動するY"
						v[391].copy v[273], 2
						s[15].on

				}


				@if s[201] .isOn() {
					// "攻撃指示!
					func_control_moveorder_proc_let_units_attack()

				} .else bl {
					// "移動指示Center(x.y)=(wheretox,wheretoy)"
					func_control_moveorder_proc_move()

						s[163].on

				}
				@if s[201] .isOn() {
					@if s[13] .isOff() {
						// "#########################"
						v[472] = divmul(80, 100, v[2216])
							v[473] = 100
							v[474] = 50
							@cmd 11550, "ui\weapon01", .args v[472], 3
							// "#########################"

					}
					@call .cev 48
						v[405].copy Temp2, 2
						Temp3 -= 6
						Temp2 += 5
						@pic[999].show {
							"pointer_sword"
								.pos Temp2, Temp3 .center
								.scrollWithMap
								.chromakey 1
								.scale 100
								.trans 0
								.rgbs 100, 100, 100, 100
								.grid 3, 1 .anim 5 .repeat
								.mapLayer 10
								.eraseWhenTransfer
								.affectedByFlash
								.affectedByShake
						}
					Temp3 += 10
						@pic[999].move {
							.pos Temp2, Temp3 .center
								.scale 100
								.trans 100
								.time 5
								.rgbs 100, 100, 100, 100
						}

				}

				@if s[21] .isOn() {
					@if s[13] .isOff() {
						// "#########################"
						v[472] = divmul(95, 100, v[2216])
							@se.play "ui\tap" .opt v[472], 100, 50
							// "#########################"

					}
					v[405].copy Temp2, 2
						Temp3 -= 6
						Temp2 += s[40] == 0 ? 5 : 1
						Temp4 = s[40] == 0 ? 100 : 75
						@if s[40] .isOff() {
							@if s[16] .isOn() {
								@pic[999].show {
									"pointer_attackmove"
										.pos Temp2, Temp3 .center
										.scrollWithMap
										.chromakey 1
										.scale Temp4
										.trans 0
										.rgbs 100, 100, 100, 100
										.grid 3, 1 .anim 5 .repeat
										.mapLayer 10
										.eraseWhenTransfer
										.affectedByFlash
										.affectedByShake
								}

							} .else bl {
								@pic[999].show {
									"pointer_flag"
										.pos Temp2, Temp3 .center
										.scrollWithMap
										.chromakey 1
										.scale Temp4
										.trans 0
										.rgbs 100, 100, 100, 100
										.grid 3, 1 .anim 5 .repeat
										.mapLayer 10
										.eraseWhenTransfer
										.affectedByFlash
										.affectedByShake
								}

							}

						} .else bl {
							@if s[16] .isOn() {
								@pic[999].show {
									"pointer_attackmove"
										.pos Temp2, Temp3 .center
										.chromakey 1
										.scale Temp4
										.trans 0
										.rgbs 100, 100, 100, 100
										.grid 3, 1 .anim 5 .repeat
										.mapLayer 10
										.eraseWhenTransfer
										.affectedByFlash
										.affectedByShake
								}

							} .else bl {
								@pic[999].show {
									"pointer_flag"
										.pos Temp2, Temp3 .center
										.chromakey 1
										.scale Temp4
										.trans 0
										.rgbs 100, 100, 100, 100
										.grid 3, 1 .anim 5 .repeat
										.mapLayer 10
										.eraseWhenTransfer
										.affectedByFlash
										.affectedByShake
								}

							}

						}
					Temp3 += s[40] == 0 ? 10 : 0
						@pic[999].move {
							.pos Temp2, Temp3 .center
								.scale Temp4
								.trans 100
								.time 5
								.rgbs 100, 100, 100, 100
						}

				}

			}

		}
	v[261..280] = 0
		s[112].off
		s[201].off
		s[16].off
		s[36].on

}


__fn func_control_moveorder_proc_let_units_attack {

	@if v[82] >= 1 {
		@if v[82] <= 10 {
			v[v[4530] + (v[82] - 1) * 20 + 20] = 2

		}

	}
	@loop .inf() {
		@if v[v[202]] == 0 {
			// "とぎれた"
			@break

		}
		@if v[202] >= v[1007] {
			// "とりあえず40体までしか選択できない"
			@break

		}
		// "配列ゲット"
		Temp1 = v[v[202]] * 300
			Temp1 += 4700
			@if `v[Temp1 + 102] != 104 {
				Ptr20 = Temp1 + 242
					Ptr19 = Temp1 + 19
					Ptr18 = Temp1 + 20
					Ptr17 = Temp1 + 18
					Ptr16 = Temp1 + 241
					Ptr14 = Temp1 + 55
					v[Temp1 + 34] &= ~AI_routine_bits_FLAG_tracing_flag
					// "処理開始"
					v[Ptr16] = 2
					@if v[Ptr20] != 4 {
						v[Ptr20] = s[16] == 1 ? 2 : 3

					}
				// "#ForceMoveFlag"
				v[Temp1 + 34] &= ~16809984 //
					v[Temp1 + 34] &= ~(8388608 + AI_routine_bits_FLAG_tracing_wp)
					@if `v[Temp1 + 1] != 11 {
						v[Temp1 + 3] &= ~384
							v[Temp1 + 34] &= AI_routine_bits_MASK_for_initilizing_pathfinding

					}

				@if s[16] .isOn() {

					// no matter if attack move key is pressed or not, once attack order is given, just give the agents force move flag 
					//v[Temp1 + 3] &= ~AgentBits_FLAG_ForcemoveFlag
					v[Temp1 + 3] |= AgentBits_FLAG_ForcemoveFlag

				} .else bl {
					v[Temp1 + 3] |= AgentBits_FLAG_ForcemoveFlag

				}
				v[Temp1 + 3] &= ~1048576 //AgentBits_FLAG_EnableBasicAI
					// "#########"
					@if LEGV_WPamount_to_set >= 1 {
						Ptr13 = 273
							Ptr13 -= LEGV_WPamount_to_set * 2
							Ptr19 = Temp1 + 41
							@loop LEGV_WPamount_to_set {
								v[Ptr13].copy v[Ptr19], 2
									Ptr13 += 2
									Ptr19 += 2

							}

						v[Ptr13].copy v[Ptr19], 2
							// "#Set 現在目指してるWPと総WP数"
							v[Ptr14] = LEGV_WPamount_to_set
							v[Temp1 + 242] = 2

					} .else bl {
						v[Ptr14] = -1
							// "#Set 移動するX"
							v[Ptr19] = v[391]
							// "#Set 移動するY"
							v[Ptr18] = v[392]
							// "#Set 現在目指してるWPと総WP数"
							v[Temp1 + 242] = 2
							v[Temp1 + 34] |= AI_routine_bits_FLAG_RayCast // set raycast anyway

					}
				@if s[13] .isOff() {
					@if v[Ptr17] != v[100] {
						v[Temp1 + 243] = v[Temp1 + 243] == 1 ? 0 : v[Temp1 + 243]
							v[Temp1 + 29] = 0

					}

				}
				// "#Set Target"
				v[Ptr17] = v[100]
					// "#Set Direｃ"
					Ptr13 = Temp1 + 245
					v[Ptr13] = 0

			}
		// "処理終わり"
		v[202] += 1

	}

}

__fn func_control_moveorder_proc_move {
	v[390] = 0
		@loop v[1004] .dst v[340] {
			@if v[v[202]] == 0 {
				// "とぎれた"
				@break

			}
			@if v[202] > v[1007] {
				// "とりあえず40体までしか選択できない"
				@break

			}
			// "skip foundation "
			// "配列ゲット"
			Temp1 = v[v[202]] * 300
				val_add(Temp1,N4700) // Temp1 += 4700
				@if `v[Temp1 + 102] != 104 {
					Ptr20 = Temp1 + 242
						Ptr19 = Temp1 + 41
						Ptr18 = Temp1 + 42
						Ptr17 = Temp1 + 18
						Ptr15 = Temp1 + 241
						Ptr14 = Temp1 + 55
						Ptr13 = Temp1 + 35
						v[629] = Temp1 + 29
						v[Temp1 + 34] &= ~4096
						// "処理開始"
						@if v[Ptr20] != 4 {
							v[Ptr20] = s[16] == 1 ? MovementOrder_TYPE_move_ordered : MovementOrder_TYPE_prioritize_moving

						}
					@if `v[Temp1 + 1] != 11 {
						v[Temp1 + 3] &= ~384
							v[Temp1 + 3] &= AgentBits_MASK_for_initilizing_pathfinding
							// "#ForceMoveFlag"

							//is attack move?
							@if s[16] .isOn() {
								v[Temp1 + 34] &= ~AI_routine_bits_FLAG_AIskip
									v[Temp1 + 3] &= ~AgentBits_FLAG_ForcemoveFlag // on attack move, kill forcemove flag

									@if `v[Temp1 + 80] <= -10000 {
										v[Temp1 + 80] = v[1178]

									}

							} .else bl {
								v[Temp1 + 34] |= AI_routine_bits_FLAG_AIskip
									v[Temp1 + 3] |= AgentBits_FLAG_ForcemoveFlag

							}


						v[Temp1 + 34] &= AI_routine_bits_MASK_for_initilizing_pathfinding


							// "#アタックムーブじゃなければActionチェック"
							v[843] = Temp1 + 243
							TT1 = s[16] != 1 ? v[v[843]] : -999
							// "#if Action==Attack, Set Action 0"
							v[v[843]] = TT1 == 1 ? 0 : v[v[843]]
							// "#if Forcemove, AA MotionTimer Reset"
							v[v[629]] = TT1 == 1 ? 0 : v[v[629]]
							// "#if Attack Stance, set stance alert"
							v[Ptr15] = v[Ptr15] == 2 ? 0 : v[Ptr15]
							// "#Manual"
							v[Ptr15] = v[Temp1 + 34] & AI_routine_bits_FLAG_Manual_Ordered ? 4 : v[Ptr15]

					}

					@if LEGV_WPamount_to_set >= 1 {
						Ptr13 = 273
							Ptr13 -= LEGV_WPamount_to_set * 2
							@loop LEGV_WPamount_to_set {
								v[Ptr13].copy v[Ptr19], 2
									Ptr13 += 2
									Ptr19 += 2

							}

						v[Ptr13].copy v[Ptr19], 2
							// "#Set 現在目指してるWPと総WP数"
							v[Ptr14] = LEGV_WPamount_to_set
							v[273].copy v[361], 2
							v[273] .add v[395], 2

					} .else bl {
						v[Temp1 + 34] |= v[Temp1 + 103] == 0 ? AI_routine_bits_FLAG_RayCast : 0 // set raycast anyway
							v[Temp1 + 34] &= ~(AI_routine_bits_FLAG_Pathblocked + AI_routine_bits_FLAG_tracing_wp)
							@if s[40] .isOn() {
								v[Temp1 + 34] |= AI_routine_bits_FLAG_PATHFINDING
									@if `between(v[Ptr13], 1, 10) {
										v[Temp1 + 34] |= 16793600

									}

							} .else bl {
								v[Temp1 + 34] &= ~16809984
									@if s[112] .isOn() {
										v[Temp1 + 34] |= AI_routine_bits_FLAG_PATHFINDING
											@if `between(v[Ptr13], 1, 10) {
												v[Temp1 + 34] |= 16793600

											}

									}

							}
						// "#Set 移動するX"
						v[Ptr19] = v[391]
							// "#Set 移動するY"
							v[Ptr18] = v[392]
							// "#Set 現在目指してるWPと総WP数"
							v[Ptr14] = -1
							v[391].copy v[361], 2
							v[391] .add v[395], 2

					}

					// "Formation Indicator"
					@if s[40] .isOn() {
						@if v[99] > 1 {
							TT1 = v[1165] + v[340]
								@pic[TT1].show {
									"ui\direction_indicator"
										.pos v[361], v[362] .center
										.scrollWithMap
										.chromakey 1
										.scale 100
										.trans 35
										.rgbs 100, 100, 100, 100
										.angle v[389], 1000
										.mapLayer 3
										.eraseWhenTransfer
										.affectedByFlash
										.affectedByShake
								}

						}

					}

					// "#Set 目標なし"
					v[Ptr17] = 0
						Ptr13 = Temp1 + 245
						v[Ptr13] = 0
						// "Make 2nd line"
						v[390] += 1
						v[390] %= v[399]
						@if v[390] == 0 {
							@if LEGV_WPamount_to_set >= 1 {
								v[393].copy v[273], 2
									v[273] .add v[397], 2
									v[273].copy v[393], 2

							} .else bl {
								v[393].copy v[391], 2
									v[391] .add v[397], 2
									v[391].copy v[393], 2

							}

						}
					@if `v[Temp1 + 1] <= 8 {
						v[Temp1 + 3] = v[Temp1 + 241] <= 4 ? [v[Temp1 + 3] | 1048576, v[Temp1 + 3] | 1048576, v[Temp1 + 3] & ~1048576, v[Temp1 + 3] | 1048576, v[Temp1 + 3] & ~1048576][v[Temp1 + 241]] : v[Temp1 + 3]

					}
					// "処理終わり"
					s[21].on

				}
			v[202] += 1

		}
}
