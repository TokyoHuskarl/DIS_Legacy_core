//BASICALLY INHERITED Agent VARS FROM ACTION the Agent buffer

def macro_AtkerSPcost = {
	// Atker Auto Attack SP Cost
	agent_SP = agent_SP - agent_AACost
	agent_SP = max(agent_SP, 0)
}

def AtkerSave = {
	agent_AgentType.copy v[Ptr1], 300

}

__fn agent_autoattack_melee {

	def {
		shieldbash_time = 16
		bladedance_time = 48
		shieldcrack_time = 1344
		parry_time = 5
		least_crit_melee = 2
	}

	// "Access19 = AttackerObjectID Access20 = TargetObjectID"
	Ptr19 = v[207] + 1
	Ptr20 = v[Ptr20]

		
	//Ptr10 = Ptr20 * 300
	//Ptr9 = Ptr19 * 300
	Ptr10 = Ptr20 * 300 
	Ptr9 = Ptr19 * 300 // atker


	// "攻撃モーション処理"
	v[720] = v[210] + 120
	v[629] = v[210] + 29
	v[844] = v[210] + 244
	v[896] = v[210] + 296
	// "ObjTypeチェック"
	s[202..203].off
	// "Motion"
	v[v[629]] += 1
	v[v[896]] += [1, -1][v[v[844]]]
	// "ObjTypeチェック"
	Ptr18 = 300 * Ptr20 
	Ptr18 += 4701
	// "Melee "
	@if `v[v[629]] == 1 && v[Ptr18] > 0 {
			Ptr1 = v[210] + 1
	
		//extract Attacker's parameters
			v[Ptr1].copy agent_AgentType, agent_Basic_Array_size
			
			Ptr11 = Ptr18 // Ptr to victim data
			v[Ptr11].copy victim_AgentType, agent_Basic_Array_size // copy victim data to victim buffer


			s[167].off

			@if victim_AgentType == 11 { // the enemy is STATIC Type
				s[167].on
		
			}
			
			// "#################交戦デバフを付与################"
			// "#Combat Penalty Resist"
			victim_MeleeFightTimer = victim_ProcessObjBit & BaseObjBit_FLAG_Immune_to_MeleePenalty ? 0 : Const_Melee_Fight_Time_by_Melee_Attack // defined in header_common.tpc
			victim_InCombatTimer = v[1240] * v[4571]
			// "############Melee Auto Attack################"

			/* Access19 = AttackerObjectID 0~
			Access20 = TargetObjectID 1~
			Access18 = ObjTypeチェックPtr*/
			// Effect
			v[376] = 0
			s[166].off
			TT1 = Ptr20 + 500
			@if s[TT1] .isOn() {
				s[166].on
				v[376] = 4
				v[181] += 1
				@if v[181] <= 6 {
						@loop v[1017] .dst Temp20 {
							v[244] %= v[1199]
							TT11 = v[244] * 50 
							TT11 += v[1198]
							@if v[TT11] <= 1 {
									// "まず清掃"
									v[1301].copy v[TT11], 50
									// "ポインタセット開始"
									// "設定"
									v[TT11] = 1
									// "F"
									TT5 = TT11 + 49
									v[TT5] = 8
									// "Set itself"
									TT5 = TT11 + 3
									v[TT5] = 121 + agent_AAElement //v[Ptr9 + 4823]
									// "Set size"
									v[TT11 + 26] = max(100, 75 + agent_ProcessAD >> 2) //v[Ptr9 + 4809] / 4)
									// "Set Dire"
									TT5 = TT11 + 27
									v[TT5] = 13 + agent_Direction * 6
									// "けす処理をLinkedFuncに入れる"
									TT5 = TT11 + 10
									// "XY set"
									TT17 = TT11 + 6
									victim_RelativeX.copy v[361], 2
									v[361] += rnd(-3, 3)
									v[362] += rnd(-5, 5)
									v[361].copy v[TT17], 2
									// "仕上げに登録消す"
									v[244] += 1
									@break
									
							}
							v[244] += 1
							
						}
						
						
				}
				@if v[182] <= 0 {
						@if v[522] < 30 {
							v[182] += 1
							// "#Get melee weapon effect"
							v[329] = agent_AASfx / 10000
							// "#########################"
							v[472] = divmul(65, 100, v[2216])
							v[473] = rnd(80, 105)
							v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
							inputstr .asg "weapons\swing"
							inputstr .cat v[329]
							TT1 = 510
							// "Strings = t[TT1]"
							@cmd 11550, t[TT1], .args v[472], 3
							// "#########################"
							
						}
						
				}
				
			}
			
			// hit check
			@if s[167] .isOff() {
				func_bs_melee_hit_check_wo_prep() // use already extracted datas to calculation
			} .else bl {
				reg1 = 1 //if target is STATIC, won't miss
			}

			// At least in Melee AA, agent parameters remain via hitcheck
			@if reg1 == 1 {
				// "Hit!"
				@if s[167] .isOff() { // to Movable Agents

						// "#SP damage#A hit causes 4 SP loss"
						victim_SP = max(victim_SP - 4, 0)

						// "#CheckCrit"
						// "Var1 = Obj 1~V[421] = ダメージ倍率"
						var1 = Ptr19
						// "#Crit率ゲット+least_crit_melee-CritReduction"
						TT2 = least_crit_melee
						TT2 += agent_ProcessCrit - victim_CritChanceReduction
						TT1 = rnd(0, 99)
						// "#CritDamageReduction#(450-[Reduction])%"
						TT3 = 450 - victim_CritDamageReduction
						// "#[Crit]%でフラグ"
						@if TT2 >= TT1 { // CRITICAL!
							// "Set jump Timer"
							agent_DodgeTimer = 6 // atker jump up to strike!
							AtkerSave // not here - 9.9
							v[421] = TT3
					
						} .else bl {
							v[421] = 100 
					
						}

						v[421] += (agent_PerkFlagBits1 & PerkFlagBits1_FLAG_Backstab && agent_Direction == victim_Direction ? 40 : 0) + (agent_PerkFlagBits1 & PerkFlagBits1_FLAG_UnseenThreat && agent_ProcessObjBit & BaseObjBit_FLAG_Ambushing ? 70 : 0)

				
						/*// "###########Shield Bash###########"*/
						@if `agent_ProcessObjBit & BaseObjBit_FLAG_ShieldBash {
							// "#発動処理"
							// "#バフ番号指定"
							//var1 = 1196
							//var2 = Ptr20
							//@call .cev 1911
							//v[reg2] = reg2 >= 0 ? 16 : v[reg2]
							func_bs_register_buff_to_victim(1196,shieldbash_time)
							// "Give V vector"
							@if v[reg2] == shieldbash_time {
									// "#Set Dash/Knockback"
									victim_MovementOrder = 4
									victim_KnockBackTimer = v[reg2]
									/*// "###############
									速度べくとるを作る
									###############"*/
									agent_RelativeX.copy var1, 2
									victim_RelativeX.copy var3, 2
									func_make_unit_vector_from_two_points_atan2(agent_RelativeX,agent_RelativeY,victim_RelativeX,victim_RelativeY,44000)
									reg1.copy victim_MilPixVx, 2
									
							}
							
						}

						// copyback victim data here once
						copyback_victim_data(Ptr11)

				} .else bl { // to buildings
						v[421] = 100
						
				}
				
				// "＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃ここそのうち用意した関数に置き換える＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃"
				// get Atker AA parameters
				Temp1 = agent_ProcessAD
				Temp2 = agent_AA_ARorMR
				Temp3 = agent_AAElement
				// "AABits"
				var9 = agent_AABits & ~v[4812]
				v[422] = 0
				func_damage_calculation()

				// ################################################
				//You need to re-extract agent parameters!
				// ################################################
				v[v[210]].copy Address_agent_array_head, 301 //Atker
				v[Ptr11].copy victim_AgentType, agent_Basic_Array_size // copy victim data to victim buffer

				
				// Atker Auto Attack SP Cost macro
				macro_AtkerSPcost

				// "Effect"
				@if s[166] .isOn() {
						TT2 = agent_ProcessObjBit & BaseObjBit_FLAG_Immune_to_bleed ? 999999 : v[1138]
						@if reg2 >= TT2 {
							// "Blood stain on 1h weapon"
							@if `!(agent_ProcessObjBit & BaseObjBit_FLAG_Standard_Bearer) { // not Standard bearer
									agent_2hweapon_stain += 1
									agent_2hweapon_stain = min(agent_2hweapon_stain, 12)
									
							}

							s[141].on
							@if v[181] <= 4 {
									victim_RelativeX.copy v[361], 2
									v[182] += 1
									// "#Get melee weapon effect"
									TT1 = agent_AASfx % 10000
									v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
									@loop 1 {
								// "Common"
								@if TT1 == 0 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(50, 110)
										@cmd 11550, "重いパンチ2", .args v[472], 3
										// "#########################"
										@break
										
								}
								// "Swords"
								@if TT1 == 1 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(80, 120)
										// "need moar metalic features within the sound"
										@cmd 11550, "weapons\sword_slash_body_nenetei", .args v[472], 3
										// "#########################"
										@break
										
								}
								// "Axe/Cleavers"
								@if TT1 == 2 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(50, 75)
										@cmd 11550, "重いパンチ2", .args v[472], 3
										// "#########################"
										@break
										
								}
								// "Spear/Piercing"
								@if TT1 == 3 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(83, 110)
										@cmd 11550, "weapons\Spear_stab_body_nenetei", .args v[472], 3
										// "#########################"
										@break
										
								}
								// "Pike"
								@if TT1 == 4 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(72, 82)
										@cmd 11550, "weapons\pike_stab_1", .args v[472], 3
										// "#########################"
										@break
										
								}
								// "Siege Ram"
								@if TT1 == 100 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(83, 100)
										@cmd 11550, "RTP\earth5", .args v[472], 3
										// "#########################"
										@break
										
								}
								
									}
									
									// "Get MaxHP of the victim"
									TT3 = victim_MaxHP / 10
									TT2 = rnd(0, 9)
									// "if the damage amount is higher than 10% of max HP of the victim more likely bleed effect happens"
									TT2 += TT3 < reg2 ? 3 : 0
									TT2 *= v[243] < v[1124] ? 1 : 0
									@if TT2 >= 8 {
										v[372] = (victim_BaseObjBit & 4096) ? 1 : 0
										//set blood variation - mini_blood_damage_threshold is defined in module_core_RTS_main_effects_gib_functions.tpc 
										var4 = reg2 >= mini_blood_damage_threshold ? 0 : 1
										func_call_mini_blood_f_effect(v[361] v[362] v[372] var4)
										
									}
									
							}
							
						} .else bl {
							@if v[181] <= 4 {
									v[182] += 1
									// "#Get melee weapon effect"
									TT1 = agent_AASfx % 10000
								// "Common"
								v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
								@if TT1 == 0 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(115, 170)
										@cmd 11550, "重いパンチ2", .args v[472], 3
										// "#########################"
										@break
										
								
								// "Swords"
								}.elif TT1 == 1 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(90, 110)
										@cmd 11550, "weapons\Sword_Slash_01", .args v[472], 3
										// "#########################"
										@break
										
								
								// "Axe/Cleavers"
								}.elif TT1 == 2 {
										// "i don't like this, maybe change later"
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(90, 110)
										@cmd 11550, "weapons\Sword_heavy_slash_01", .args v[472], 3
										// "#########################"
										@break
										
								
								// "Spear/Piercing"
								}.elif TT1 == 3 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(90, 110)
										@cmd 11550, "weapons\Spear_stab_armor", .args v[472], 3
										// "#########################"
										@break
										
								
								// "Pike"
								}.elif TT1 == 4 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(90, 100)
										@cmd 11550, "weapons\pike_stab_armor", .args v[472], 3
										// "#########################"
										@break
										
								
								// "Siege Ram"
								}.elif TT1 == 100 {
										// "#########################"
										v[472] = divmul(70, 100, v[2216])
										v[473] = rnd(83, 100)
										@cmd 11550, "RTP\earth5", .args v[472], 3
										// "#########################"
										@break
										
								}
								
									
									
							}
					
						}
						
				}


				// atker data save
					AtkerSave // not here






				// "##################"
				// "Trample Damage"
				@if `agent_AABits & AABits_FLAG_Trample {
						s[162].on
						@if v[217] < v[4559] {
							v[217] += 1
							@loop v[4559] .dst Temp20 {
									v[216] %= v[4559]
									Temp1 = v[216] * 100 
									Temp1 += v[1076]
									Ptr15 = Temp1 + 1
									@if v[Ptr15] == 0 {
								// "Access17 = AttackerObjチェックPtr"
								Ptr17 = Ptr9 
								Ptr17 += 4700
								// "まず清掃"
								v[1301].copy v[601], 100
								v[1301].copy v[Ptr15], 100
								// "ParentObjセット"
								v[609] = Ptr19
								// "出る場所セット"
								TT1 = Ptr17 + 7
								v[TT1].copy v[605], 2
								v[605..606] *= 10000
								v[TT1].copy v[607], 2
								// "Projectile team"
								v[618] = v[Ptr17 + 100]
								// "パラメータ等入力begin"
								// "#Pic"
								v[602] = 1
								// "#ProjectileType"
								v[601] = 2
								// "#あたり判定"
								v[610..611] = v[Ptr17 + 117] / 1000
								// "#威力"
								/*var1 = Ptr19
								var2 = 1
								@call .cev 2004*/
								macro_get_agent_slot_to_r1(Ptr19 SLOT_CURRENT_AD)
								// "[AD]*25%"
								reg1 = muldiv(reg1, 20, 100)
								v[621] = reg1
								// "#ARMRと属性"
								v[622] = 0
								v[623] = v[Ptr17 + 123]
								// "#Nopic"
								v[628] |= 8
								// "#Timer"
								v[700] = 1
								// "パラメータ等入力end"
								v[601].copy v[Ptr15], 100
								// "演出"
								@break
								
									}
									v[216] += 1
									
							}
							
							
						}
						
				}

				// "Blade Dance"
				@if `agent_AABits & AABits_FLAG_BladeDance {
						var1 = 1243
						var2 = Ptr19
						func_bs_register_buff_with_time(1243 Ptr19 bladedance_time)
						
				}
				// "################"
				Ptr15 = 300 * Ptr19 
				Ptr15 += 4700
				// "#試作#Functionを呼ぶ"
				v[730] = Ptr15 + 130
				@if v[v[730]] >= 1 {
						TT1 = Ptr15 + 7
						v[TT1].copy v[590], 2
						@call .cev v[v[730]]
						
				}
				
			} .else bl {
				// "Miss!"

				// let atker pay cost as well
				macro_AtkerSPcost
				AtkerSave 

				// "#SP damage#Evading costs 2 SP"
				victim_SP -= 2
				victim_SP = max(victim_SP, 0)

				// set relX to effect var
				victim_RelativeX.copy v[221], 2
				@if reg2 == 1 { // Shield Blocked!
						// "##############CheckBits##############"
						// "Shield Cracking"
						reg3 = 0
						@if `agent_AABits & AABits_FLAG_CrackingShield {
							// "＃＃＃＃＃＃＃＃＃＃Get Shield Break Resistance＃＃＃＃＃＃＃＃＃＃"
							@if `victim_PerkFlagBits1 & 1 {
									TT1 = muldiv(victim_ShieldBreakResistance, 130, 100)
									
							}
							// "＃＃＃＃＃＃＃＃＃＃Chance Roll＃＃＃＃＃＃＃＃＃＃"
							reg1 = agent_ProcessAD / 3
							reg1 *= agent_AABits & AABits_FLAG_CrackingShieldBONUS ? 2 : 1
							
							// "＃＃＃＃＃＃＃＃＃＃Roll!＃＃＃＃＃＃＃＃＃＃"
							TT3 = rnd(0, reg1)
							@if TT3 >= TT1 {
									reg3 = 1
									// "#バフ番号指定"
									copyback_victim_data(Ptr11)
									func_bs_register_buff_with_time(1258,Ptr20,shieldcrack_time)
									v[Ptr11].copy victim_AgentType, agent_Basic_Array_size // copy victim data to victim buffer
									
							}
							
						}

						@if s[166] .isOn() {
							@if reg3 == 0 {
									@if v[182] <= 2 {
								// "#########################"
								v[472] = divmul(60, 100, v[2216])
								v[473] = rnd(115, 120)
								v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
								@cmd 11550, "weapons/shield_hit", .args v[472], 3
								// "#########################"
								
									}
									
							} .else bl {
									// "#Dust Particle Effect"
									@loop v[1017] .dst Temp20 {
										v[244] %= v[1199]
										TT11 = v[244] * 50 
										TT11 += v[1198]
										@if v[TT11] <= 0 {
												// "まず清掃"
												v[1301].copy v[TT11], 50
												// "ポインタセット開始"
												// "設定"
												v[TT11] = 1
												v[TT11 + 49] = 3
												v[TT11 + 3] = 160
												TT1 = TT11 + 6
												victim_RelativeX.copy v[TT1], 2
												v[244] += 1
												@break
												
										}
										v[244] += 1
										
									}
									
									@if v[182] <= 3 {
										// "#########################"
										v[472] = divmul(78, 100, v[2216])
										v[473] = rnd(87, 100)
										v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
										@cmd 11550, "weapons/shield_cracked01", .args v[472], 3
										// "#########################"
										
									}
									
							}
							// "Call Shield"
							victim_ShieldFlash = victim_MainShieldID > 0 ? 4 : 0
							// "#Shield Motion"
							@if victim_ActionState != 1 {
									victim_ActionState = 2
									victim_AATimer += victim_AATimer < 1 ? 140 : 0
									
							}


							// block popup
							@if victim_ShieldMotionTimer < 1 { // not in shield motion
								@if s[307] .isOff() {
										@if `v[183] < v[4572] / 2 {
											// "#描画範囲内か？"
											v[220] %= 30
											v[220] += 1201
											v[220] += 1
											v[223] = v[220]
											v[221] += rnd(-6, 6)
											v[222] += rnd(-3, 3)
											v[222] += s[162] == 1 ? 10 : 0
											// "#サイズは最低100%"
											v[225] = 100
											// "AR"
											TT1 = v[1204] - 10
											@pic[v[223]].show {
													PATH_pic_numdir_block
													.pos v[221], v[222] .center
													.scrollWithMap
													.chromakey 1
													.scale v[225]
													.trans TT1
													.rgbs 100, 100, 100, 100
													.mapLayer 7
													.eraseWhenTransfer
													.affectedByFlash
													.affectedByShake
											}
											v[222] = victim_RelativeY - 24
											v[222] += s[162] == 1 ? 10 : 0
											@pic[v[223]].move {
													.pos v[221], v[222] .center
													.scale v[225]
													.trans 100
													.time 12
													.rgbs 100, 100, 100, 100
											}
											v[183] += v[184] >= v[1128] ? 2 : 1
											
										}
										
								}
							}
							// "Set ShieldMotion Timer"
							victim_ShieldMotionTimer = 6

							
						}
						// refresh vic data
						copyback_victim_data(Ptr11)	
				} .else bl { // not shield block 
						@if reg2 == 2 { // parried!
							@if s[166] .isOn() {
									@if v[182] <= 3 {
										// "#########################"
										@if v[522] < 50 {
												v[329] = rnd(1, 4)
												// "#########################"
												v[472] = divmul(60, 100, v[2216])
												v[473] = rnd(100, 130)
												v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
												inputstr .asg "weapons\sword_clash_"
												inputstr .cat v[329]
												TT1 = 510
												// "Strings = t[TT1]"
												@cmd 11550, t[TT1], .args v[472], 3
												
										}
										
									}

									@if victim_ShieldMotionTimer < 1 { // not in shield motion
										@if s[307] .isOff() {
											@if `v[183] < v[4572] / 2 {
													// "#描画範囲内か？"
													v[220] %= 30
													v[220] += 1201
													v[220] += 1
													v[223] = v[220]
													v[221] += rnd(-6, 6)
													v[222] += rnd(-3, 3)
													v[222] += s[162] == 1 ? 10 : 0
													// "#サイズは最低100%"
													v[225] = 100
													// "AR"
													TT1 = v[1204] - 10
													@pic[v[223]].show {
														PATH_pic_numdir_block
														.pos v[221], v[222] .center
														.scrollWithMap
														.chromakey 1
														.scale v[225]
														.trans TT1
														.rgbs 100, 100, 100, 100
														.mapLayer 7
														.eraseWhenTransfer
														.affectedByFlash
														.affectedByShake
													}
													v[222] = victim_RelativeY - 24
													v[222] += s[162] == 1 ? 10 : 0
													@pic[v[223]].move {
														.pos v[221], v[222] .center
														.scale v[225]
														.trans 100
														.time 12
														.rgbs 100, 100, 100, 100
													}
													v[183] += v[184] >= v[1128] ? 2 : 1
													
											}
											
										}
									}
									// "Set ShieldMotion Timer"
									victim_ShieldMotionTimer = 6

									// save upon parrying
									copyback_victim_data(Ptr11)
									// "#"
									@if `victim_ProcessObjBit & BaseObjBit_FLAG_Duelist_Activated { // Duelist
										// "#バフ番号指定"
										func_bs_register_buff_with_time(1243 Ptr20 bladedance_time)
								
									}
									// "#バフ番号指定"
									func_bs_register_buff_with_time(1171 Ptr20 parry_time)
									
							}
							
						} .else bl { // dodged!
							
							@if s[166] .isOn() { // in screen
								@if victim_DodgeTimer < 1 { // not in dodge motion 
									@if v[181] <= 1 {
										@if v[522] < 25 {
												// "#########################"
												v[472] = divmul(25, 100, v[2216])
												v[473] = rnd(80, 120)
												v[474] = divmul(victim_RelativeX + v[1001], v[1281], 50)
												@cmd 11550, "evade2", .args v[472], 3
												// "#########################"
												
										}
								
									}
									
									@if s[307] .isOff() {
										@if `v[183] < v[4572] / 2 {
												// "#描画範囲内か？"
												v[220] %= 30
												v[220] += 1201
												v[220] += 1
												v[223] = v[220]
												v[221] += rnd(-6, 6)
												v[222] += rnd(-3, 3)
												v[222] += s[162] == 1 ? 10 : 0
												// "#サイズは最低100%"
												v[225] = 100
												// "AR"
												TT1 = v[1204] - 10
												@pic[v[223]].show {
													PATH_pic_numdir_miss
													.pos v[221], v[222] .center
													.scrollWithMap
													.chromakey 1
													.scale v[225]
													.trans TT1
													.rgbs 100, 100, 100, 100
													.mapLayer 7
													.eraseWhenTransfer
													.affectedByFlash
													.affectedByShake
												}
												v[222] = victim_RelativeY - 24
												v[222] += s[162] == 1 ? 10 : 0
												@pic[v[223]].move {
													.pos v[221], v[222] .center
													.scale v[225]
													.trans 100
													.time 12
													.rgbs 100, 100, 100, 100
												}
												v[183] += v[184] >= v[1128] ? 2 : 1
												
										}
								
									}
									
								}
								// "Set Dodge Timer"
								victim_DodgeTimer = 8
							}
							copyback_victim_data(Ptr11) // save upon dodge
						}
						
				}
				
			}

			// "Attacker Combat Timer"
			TT1 = v[210] + 80
			v[TT1] = v[1240] * v[4571]
			s[202..203].off
			
	} .else bl {
		TT1 = v[210] + 274
		v[TT1] &= -2//~1

		// "アクションに2F分余韻を…"
		@if `v[v[629]] > v[v[720]] + 1 {
			v[843] = v[210] + 243
			// "AAクールタイムモーション"
			v[726] = v[210] + 126
			// "ビット見る"
			v[v[843]] = v[v[726]] & ExMotionFlags_FLAG_have_AA_CD_Spr ? 2 : 0
			// "AAモーション初期化"
			v[v[629]] = 0
			v[v[896]] = 0
			TT1 = v[210] + 245 
			v[TT1] = 0
			// "Initialize AI Timer"
			TT1 = v[210] + 80 
			v[TT1] = v[1240] * v[4571]
	
		}
		
	}
}



//cev .id(36), .name("AgentAct:RangedAA_Shot"), {
__fn agent_autoattack_ranged {
	// "Access19 = AttackerObjectIDAccess20 = TargetObjectID"
	Ptr19 = v[207] + 1
	Ptr20 = v[Ptr20]
	// "対象Objがある"
	@if Ptr20 >= 1 {
			// "ObjTypeチェック"
			Ptr18 = 300 * Ptr20 
			Ptr18 += 4701
			// "攻撃モーション処理"
			v[629] = v[210] + 29
			v[726] = v[210] + 126
			v[v[726]] |= (v[v[726]] & 50331648) == 50331648 ? 67108864 : 0
			//v[v[726]] |= (v[v[726]] & 50331648) == 50331648 ? 67108864 : 0
			// "ObjTypeチェック"
			s[202..203].off
			@if v[Ptr18] > 0 {
						v[720] = v[210] + 120
				@if v[v[629]] >= v[v[720]] {
						@if v[243] < v[1017] {
					// "射撃成功！"
					// "#Auto Attack SP Cost"
					Ptr1 = v[210] + 1
					v[Ptr1].copy agent_ObjectType, 300 //deploy atk agent para
					macro_AtkerSPcost // pay AA cost
					agent_ObjectType.copy v[Ptr1], 300

					
					// "#親Objと対象Objをセット"
					//v[609] = Ptr19
					//v[623] = Ptr20
					// "#始点を設定"
					//v[607] = v[210] + 7
					//v[v[607]].copy v[607], 2
					// "#終点を設定"
					v[624] = Ptr18 + 6
					v[v[624]].copy v[624], 2


					// "#diffusionf: y=x (x)/(-240)+30"
					//TT10 = max(pow(v[v[210] + 265], 2) / -240 + 30, 0)
					TT10 = max(pow(agent_ProcessHIT, 2) / -225 + 32, 0)

					v[624] += rnd(-TT10, TT10)
					v[625] += rnd(-TT10, TT10)

					// this seems what had been breaking arrow and camera relation
					//v[624].add v[53], 2

					// "#フレーム数を設定"
					//v[700] = v[v[210] + 128]
					//v[603] = v[700] - 1
			
					//v[729] = v[210] + 129
					agent_AASfx = agent_AASfx > 90 ? agent_AASfx : 91
					//v[637] = v[v[210] + 244]
					s[141].on
					v[624].copy v[361], 2

					@call .cev agent_AASfx
					//after this...
					//Restore Ptr
					Ptr1 = v[210] + 1
					v[Ptr1].copy agent_ObjectType, 300 //deploy atk agent para
					//v[842] = v[210] + 242
					//v[v[842]] = 0
					agent_MovementOrder = 0
					//v[843] = v[210] + 243
					// "AAクールタイムモーション"
					//v[726] = v[210] + 126
					// "ビット見る"
					agent_ActionState = agent_ExMotionFlags & ExMotionFlags_FLAG_have_AA_CD_Spr ? 2 : 0
					// "AAモーション初期化"
					//v[629] = v[210] + 29
					//v[v[629]] = 0
					agent_AttackFrame = 0
					// "Initialize AI Timer"
					//v[v[210] + 84] = v[v[210] + 300] % v[1195]
					agent_ActionTimer = agent_generated_ID % v[1195]
					//v[v[210] + 80] = v[1240] * v[4571] / 2
					agent_InCombatTimer = v[1240] * v[4571]
					agent_InCombatTimer /= 2
					agent_ObjectType.copy v[Ptr1], 300
					
						} .else bl {
					s[202].on
					s[203].off
					
						}
						
				} .else bl {
						v[v[629]] += 1
						
				}
				
			} .else bl {
				s[202].on
				s[203].off
		
			}
			
	} .else bl {
			s[202].on
			s[203].on
			
	}
	@if s[202] .isOn() {
			@if s[203] .isOn() {
				TT1 = v[210] + 242
				v[TT1] = 0
		
			}
			TT1 = v[210] + 243
			v[TT1] = 0 
			// "#AAタイマー初期化"
			TT1 = v[210] + 28
			v[TT1] = 0
			
	}
}








// This is obsolete and unused... 18.5.23
//because arrow effects independently deals with the same hit check process after arrow remake
cev .id(31), .name("Legacy_AgentAct:RangedAA_Check"), {
	// "Leave Arrow Picture"
	v[Temp1] = 1
	// "エフェクト処理から呼び出される"
	TT1 = Temp1 + 8
	TT2 = Temp1 + 22
	/* "Access19 = AttackerObjectID
	Access20 = TargetObjectID
	Access18 = TargetObjTypeチェックPtr"*/
	Ptr19 = v[TT1]
	Ptr20 = v[TT2]
	Ptr10 = Ptr20*300
	Ptr9 = Ptr19*300
	Ptr18 = Ptr10 + 4701
	// "TargetObjが存在している"
	@if v[Ptr18] >= 1 {
			// "処理開始"
			v[607] = Temp1 + 6
			// "#着弾点ゲット"
			v[v[607]].copy v[607], 2
			// "#対象のx,y,width,heightゲット"
			Temp10 = Ptr18 + 6
			v[Temp10].copy Temp10, 2
			Temp12 = Ptr18 + 9
			v[Temp12].copy Temp12, 2
			// "#当たり判定チェック"
			@if `between(v[607], Temp10 - Temp12, Temp10 + Temp12) && between(v[608], Temp11 - Temp13, Temp11 + Temp13) {
		s[167].off
		@if `v[Ptr10 + 4701] == UNIT_CLASS_STATIC {
				s[167].on
				
		}
		v[Ptr10 + 4780] = v[1240] * v[4571]
		// "Get difference of elevationTemp20"
		Temp20 = v[Ptr9 + 4757] - v[Ptr18 + 56]
		var1 = Ptr19
		// "Get Dir"
		@if s[167] .isOff() {
				//9.3.23
				var3 = v[Temp1 + 36]
				//@call .cev 43
				func_bs_ranged_hit_check(Ptr19 Ptr20 var3)
				v[607] = Ptr10 + 4707
				v[v[607]].copy v[607],2
		} .else bl {
				reg1 = 1
				
		}
		@if reg1 == 1 {
				// "Hit!"
				// "#CheckCrit"
				// "Var1 = Obj 1~V[421] = ダメージ倍率"
				@if s[167] .isOff() {
			var1 = Ptr19
			var5 = Ptr10 + 4700
			// "#Crit率ゲット"
			// "#3-CritReduction"
			TT2 = v[var1 * 300 + 4815] + 2 - v[var5 + 239]
			TT1 = rnd(0, 99)
			// "#CritDamageReduction#(450-[Reduction])%"
			TT3 = 450 - v[var5 + 240]
			// "#[Crit]%でフラグ"
			v[421] = TT2 >= TT1 ? TT3 : 100
			
				} .else bl {
			v[421] = 100
			
				}
				// "#Elevation Bonus"
				v[421] += 10 * Temp20
				/* "＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
	ここそのうち用意した関数に置き換える
	＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃"*/
				// "ADを取得"
				/*var1 = Ptr19
				var2 = 1
				@call .cev 2004*/
				macro_get_agent_slot_to_r1(Ptr19 SLOT_CURRENT_AD)
				Temp1 = reg1
				// "ARかMRか取得"
				v[722] = Ptr9
				v[722] += 4822
				Temp2 = v[v[722]]
				// "射撃属性"
				Temp3 = 1
				// "AABits"
				var9 = v[722] + 2
				var9 = v[var9]
				//@call .cev 40
				func_damage_calculation()
				// "############"
				// "Effect"
				// "#あたったので演出チェック"
				@if `s[Ptr20 + 500] == 1 {
					@if reg1 == reg2 {
							// "Red Flash"
							v[376] += v[182] < 5 ? 1 : 0
							@if v[376] >= 2 {
						v[182] += 1
						v[329] = rnd(0, 2)
						// "#########################"
						v[472] = divmul(60, 100, v[2216])
						v[473] = rnd(90, 110)
						v[474] = divmul(v[607] + v[1001], v[1281], 50)
						inputstr .asg "arrow_hit_body_"
						inputstr .cat v[329]
						TT1 = 510
						// "Strings = t[TT1]"
						@cmd 11550, t[TT1], .args v[472], 3
						// "#########################"
						// "Get MaxHP of the victim"
													TT3 = v[TT2 = Ptr10 + 4805] / 10
						TT2 = rnd(0, 9)
						// "if the damage amount is higher than 10% of max HP of the victim more likely bleed effect happens"
						TT2 += TT3 < reg2 ? 3 : 0
						TT2 *= v[243] < v[1124] ? 1 : 0
						@if TT2 >= 8 {
								//s[141].on
								v[372] = v[Ptr10 + 4840] & 4096 ? 1 : 0
								//@call .cev 111
								var4 = reg2 >= mini_blood_damage_threshold ? 0 : 1
								func_call_mini_blood_f_effect(effectArgX,effectArgY,v[372],var4)
								
						}
						
							}
							
					} .else bl {
							// "#########################"
							v[472] = divmul(45, 100, v[2216])
							v[473] = rnd(80, 95)
							v[474] = divmul(v[607] + v[1001], v[1281], 50)
							@cmd 11550, "arrow_hit_armor", .args v[472], 3
							// "#########################"
							
					}
			
				}
				// "Remove Arrow Picture"
				Temp10 = v[241] + v[1220]
				@pic[Temp10].erase
				// "#試作#Functionを呼ぶ"
				Ptr15 = Ptr9
				Ptr15 += 4700
				v[730] = Ptr15 + 130
				@if v[v[730]] >= 1200 {
			TT1 = Ptr15 + 7
			v[TT1].copy v[590], 2
			@call .cev v[v[730]]
			
				}
				
		} .else bl {
				// "Miss!"
				v[607].copy v[221], 2
				@if `s[Ptr20 + 500] == 1 {
			@if reg2 == 1 {
					// "Shield Blocked!"
					// "#########################"
					v[472] = divmul(60, 100, v[2216])
					v[473] = rnd(115, 120)
					v[474] = divmul(v[607] + v[1001], v[1281], 50)
					@cmd 11550, "重いパンチ2", .args v[472], 3
					// "#########################"
					// "Call Shield"
					TT2 = Ptr10 + 4952
					// "NOT siege ram"
					@if `v[TT2 - 123] != 100 {
				v[TT2 + 32] = v[TT2] > 0 ? 4 : 0
				// "#Shield Motion"
				TT2 = Ptr10 
				TT2 += 4943
				@if v[TT2] != 1 {
						v[TT2] = 2
						TT2 -= 215
						v[TT2] += v[TT2] < 300 ? 900 : 0
						
				}
				
					}
					@if s[307] .isOff() {
				@if `v[183] < v[4572] / 2 {
						// "#描画範囲内か？"
						v[220] = ((v[220]+1)%30)+1201
						//9.3.23
						//v[220] += 1201
						//v[220] += 1
						v[223] = v[220]
						v[221] += rnd(-6, 6)
						v[222] += rnd(-3, 3)
						v[222] += s[162] == 1 ? 10 : 0
						// "#サイズは最低100%"
						v[225] = 100
						// "AR"
						TT1 = v[1204] - 10
						@pic[v[223]].show {
					"num\num_block"
					.pos v[221], v[222] .center
					.scrollWithMap
					.chromakey 1
					.scale v[225]
					.trans TT1
					.rgbs 100, 100, 100, 100
					.mapLayer 7
					.eraseWhenTransfer
					.affectedByFlash
					.affectedByShake
						}
						v[222] = v[608] - 24
						v[222] += s[162] == 1 ? 10 : 0
						@pic[v[223]].move {
					.pos v[221], v[222] .center
					.scale v[225]
					.trans 100
					.time 12
					.rgbs 100, 100, 100, 100
						}
						v[183] += v[184] >= v[1128] ? 2 : 1
						
				}
				
					}
					// "Remove Arrow Picture"
					Temp10 = v[241] + v[1220]
					@pic[Temp10].erase
					
			} .else bl {
					@if s[307] .isOff() {
				@if `v[183] < v[4572] / 2 {
						// "#描画範囲内か？"
						v[220] %= 30
						v[220] += 1201
						v[220] += 1
						v[223] = v[220]
						v[221] += rnd(-6, 6)
						v[222] += rnd(-3, 3)
						v[222] += s[162] == 1 ? 10 : 0
						// "#サイズは最低100%"
						v[225] = 100
						// "AR"
						TT1 = v[1204] - 10
						@pic[v[223]].show {
					"num\num_miss"
					.pos v[221], v[222] .center
					.scrollWithMap
					.chromakey 1
					.scale v[225]
					.trans TT1
					.rgbs 100, 100, 100, 100
					.mapLayer 7
					.eraseWhenTransfer
					.affectedByFlash
					.affectedByShake
						}
						v[222] = v[608] - 24
						v[222] += s[162] == 1 ? 10 : 0
						@pic[v[223]].move {
					.pos v[221], v[222] .center
					.scale v[225]
					.trans 100
					.time 12
					.rgbs 100, 100, 100, 100
						}
						v[183] += v[184] >= v[1128] ? 2 : 1
						
				}
				
					}
					
			}
			
				}
				
		}
		
			}
			
	}
	s[141].off


}





