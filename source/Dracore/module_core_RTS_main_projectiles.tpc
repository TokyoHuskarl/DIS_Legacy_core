// Loaded in "./module_core_RTS_main.tpc"

// need refactoring
// uh oh

__fn MAIN_CEV_RTS_PROJECTILE_MANAGER {

	defv Projectile_Ptr = __id(Ptr12) // given to each projectile proc, never change from Ptr12


		v[441] = 303
		v[442] = 1
		v[443] = __id(projectile_RelativeX)
		v[444] = __id(projectile_RelativeY)
		v[445] = 1
		v[446] = 100
		v[447] = __id(projectile_Transparency)
		v[448] = 1000
		v[453] = 3
		v[454] = __id(projectile_Angle)
		v[455] = 0
		v[456] = 0
		v[458] = 1
		v[459..461] = 0
		v[462] = 1
		v[217] = 0

		@loop v[4559] .dst v[214] {
			v[215] = v[214] * 100
				// @comment "Access15 = ProjType"
				Projectile_Ptr = v[215] + v[1075]
				// @comment "弾が存在する"
				@if v[Projectile_Ptr] >= 1 {

					// deploy projectile data to buffer
					v[Projectile_Ptr].copy projectile_ProjectileType,projectileMemSize

						// this is shite, but needed since current projectile registering procs are all from classic awful design
						// I mean the system that treats all projectiles based on Relative Coordinates
						@if `!(projectile_ProjectileFlag2 & PROJ_FL2_AbsSet) {
								projectile_RelativeX.copy projectile_AbsX,2
								projectile_AbsX.add FrameCamDiff_X,2
								projectile_AbsX.sub LEGV_MainMAP_PointOfReferenceX,2
								projectile_AbsX.copy projectile_milPixX,2
								projectile_milPixX.mul N10000,2 

								// also init hit flags
								@if projectile_ProjectileType == 2 {
										Ptr13 = v[214] * PRJ_HIT_FLAGS_SIZE 
										Ptr13 += gPtr_ProjectileHitFlags_HEAD
										v[ptr_null].copy v[Ptr13],PRJ_HIT_FLAGS_SIZE
								}
								projectile_ProjectileFlag2 |= PROJ_FL2_AbsSet

						}

					//@comment "Access15 = タイマー"
						//@comment "タイマーが切れていない"
						@if projectile_Timer >= 1 {


								val_add(v[217],N1)
								// @comment "#T2 = Vxのポインタ#T3 = ピクチャ番号#G5 = 詳細位置xPtr#G6 = 詳細位置上yPtr#G7 = xPtr#G8 = yPtr"
								// @comment "##process delta "
								@if s[2] .isOff() {
									//@comment "タイマー減らす"
									val_sub(projectile_Timer,N1)
										// if cev is set
										@if projectile_CallFuncProjectile >= v[1186] {
												
												// ordinary
												@if `projectile_ProjectileFlag1 & PROJ_FL1_Aftermath_Projectile {
														s[123].on
														@call .cev projectile_CallFuncProjectile
														s[123].off

												}.else bl{
													//@comment "##If a function is registered in Get3, call it"
														s[123].on
														v[605].enum 4, 9
														v[605..613] += Projectile_Ptr
														@call .cev projectile_CallFuncProjectile
														s[123].off
														v[605].deref projectile_milPixX,9  // koko troublesome
												}
										}

										//@comment "まず加速の処理から"
										projectile_milVx .add projectile_milAx, 2
										//@comment "次に速度を加える"
										projectile_milPixX .add projectile_milVx, 2
								}

								// @comment "座標セット"
								projectile_milPixX.copy projectile_AbsX,2
								projectile_AbsX.div N10000,2
								projectile_AbsX.copy projectile_RelativeX,2
								projectile_RelativeX.add LEGV_MainMAP_PointOfReferenceX,2

								
								// @comment "#範囲攻撃処理分岐#仮置き"
								// these temp vars (v[381..382]) can be removed I suppose?
								// still used in SFX system, you need to check before removing 
								projectile_RelativeX.copy v[381], 2
								// not pause.. once after did some shits, pause nest will be only one. not like this tarded way
								@if s[2] .isOff() {
									//@comment "#Width+Height"
									projectile_Width.copy TT1,1
									val_add(TT1,projectile_Height)

										//@comment "#範囲攻撃処理分岐#0なら当たり判定を持たない"
										val_init(reg10)
										@if TT1 > 0 {
												// collision timer

												/*
												v[640] = v[607] + 33
												v[v[640]] -= 1
												*/

												val_sub(projectile_CollisionTimer,N1)
												@if projectile_CollisionTimer <= 0 {
														projectile_AbsX.copy Temp7, 2
														Temp7.sub Map_dst_MortO_from_RefO_x, 2
														/* @comment "##########################2002 Crd->Mort V1V2 reg1##########################"*/
														Temp7.copy TT1,2
														TT1.sub projectile_Width, 2
														TT1 .div v[74], 2
														/*@comment "TT1=MortX TT2=MortY ビット演算して処理するよ"*/
														TT1 = (TT1 | TT1 << 8) & 0xFF00FF
														TT1 = (TT1 | TT1 << 4) & 0xF0F0F0F
														TT1 = (TT1 | TT1 << 2) & 0x33333333
														TT1 = (TT1 | TT1 << 1) & 0x55555555
														TT2 = (TT2 | TT2 << 8) & 0xFF00FF
														TT2 = (TT2 | TT2 << 4) & 0xF0F0F0F
														TT2 = (TT2 | TT2 << 2) & 0x33333333
														TT2 = ((TT2 | TT2 << 1) & 0x55555555 ) << 1
														//@comment "yは1bitシフトで終わり"
														//TT2 <<= 1
														//@comment "最後にTT1 OR TT2"
														TT11 = TT1 | TT2
														/* @comment "##########################2002 Crd->Mort V1V2 reg1##########################"*/
														Temp7.copy TT1,2
														TT1.add projectile_Width, 2
														TT1 .div v[74], 2
														/* @comment "TT1=MortX	TT2=MortY	ビット演算して処理するよ" */
														TT1 = (TT1 | TT1 << 8) & 0xFF00FF
														TT1 = (TT1 | TT1 << 4) & 0xF0F0F0F
														TT1 = (TT1 | TT1 << 2) & 0x33333333
														TT1 = (TT1 | TT1 << 1) & 0x55555555
														TT2 = (TT2 | TT2 << 8) & 0xFF00FF
														TT2 = (TT2 | TT2 << 4) & 0xF0F0F0F
														TT2 = (TT2 | TT2 << 2) & 0x33333333
														TT2 = ((TT2 | TT2 << 1) & 0x55555555)<<1
														// @comment "yは1bitシフトで終わり"
														// TT2 <<= 1
														// @comment "最後にTT1 OR TT2"
														TT2 = TT1 | TT2
														/* @comment "#########################2002 Crd->Mort V1V2 reg1 end##########################"*/
														TT1 = TT11
														/*@comment "TT1 = upper left morton TT2 = bottom right morton TT5 = shift num"*/
														TT3 = TT1 ^ TT2
														/*@comment "#mask with 11000000" "#mask with 110000" @comment "#mask with 001100" @comment "#mask with 000011"*/
														TT5 = TT3 & 768 ? 10 : TT3 & 192 ? 8 : TT3 & 48 ? 6 : TT3 & 12 ? 4 : TT3 & 3 ? 2 : 0
														//@comment "#TT6 = morton id"
														TT6 = TT2 >> TT5
														//@comment "#mask end"
														TT5 >>= 1
														v[340] = v[4546 - TT5] + TT6 * v[1004]
														v[327] = v[v[4552 - TT5] + TT6]
														//@comment "Check if the mort space is overcrowded"
														projectile_CollisionTimer = v[327] < v[4522] ? projectile_CollisionTimer : 2
														v[424] = v[340]
														//Projectile Team Save
														ProjectileTeamSave = projectile_Team % 3

														// start checking morton space
														@loop v[327] .dst Temp10 {
															ProjectileHitChecker = v[424] + Temp10

																macro_get_agent_MetaTeam_into_var(v[ProjectileHitChecker],TT10)
																@if ProjectileTeamSave != TT10 {

																	// get meta team!
																		Temp11 = v[ProjectileHitChecker] * v[1117] // let's check it out...
																		val_add(Temp11,N4701)
																		v[Temp11].copy victim_AgentType, 12 // get only x,y,width or whatever here

																		
																		//@comment "当たり判定"
																		//@comment "とりあえず矩形判定"
																		projectile_hitcheck_rectangle()
																		@if reg1 == 1 {
																			//@comment "Hit flag switch v[377]"
																				//@comment "If the projectile is SingleHit Pierce type"
																				
																				@if projectile_ProjectileType == 2 {
																						
																						//opt 28.4.23
																						Ptr13 = v[214] * PRJ_HIT_FLAGS_SIZE 
																						Ptr13 += gPtr_ProjectileHitFlags_HEAD // set to head
																						Ptr13 += v[ProjectileHitChecker] // >> 5 // / 32
																						TT3 = pow(2, (v[ProjectileHitChecker] - 1) % 32)
																						//@comment "Check if already hit the unit or not"
																						v[377] = v[Ptr13] & TT3 ? 0 : 1
																						v[Ptr13] |= TT3

																				}.else bl{
																					v[377] = 1
																				}
																				

																			@if v[377] == 1 {
																				//@comment "ＨＩＴ！"
																				/* @comment "Access19 = AttackerObjectID
																					Access20 = TargetObjectID
																					Access18 = ObjTypeチェックPtr
																					temp1 = ダメージ量
																					temp2 = 防御　#0=ARで計算,1=MR #temp3 = 属性 元のダメージ量を減らすべき？" */
																					Ptr18 = Temp11
																					Ptr19 = projectile_ParentObject
																					Ptr20 = v[ProjectileHitChecker]

																					// feels experimental
																					get_AEB_element(projectile_ParentObject,__id(Ptr1),AgentExBuffer_SLOT_Ptr_To_BasicArray)
																					v[Ptr1].copy agent_AgentType, agent_Basic_Array_size
																					v[Ptr18].copy victim_AgentType, agent_Basic_Array_size // now extract all

																					// @comment "HITCHECK"
																					s[167].off
																					@if victim_AgentType == 11 { // the enemy is STATIC Type
																						s[167].on
																						var3 = -1
																						reg1 = 1
																					}.else bl{
																							// v[471] = [44, 43, 42][v[Projectile_Ptr + 26]]
																							v[471] = 44 - projectile_Hittype // you should replace call cev proc with meta func nests
																							var3 = -1
																							@call .cev v[471]
																					}



																					//@comment "reg10= 0:miss 1:hit 2:blocked"
																					@if reg1 == 1 {
																						// @comment "Hit!"
																						//@comment "#Buff"
																							var1 = projectile_ProjectileBuff
																							@if var1 >= v[1186] {
																									var3 = projectile_BuffDuration 
																									func_bs_register_buff_with_time(var1 Ptr20 var3)
																							}
																							Temp1 = projectile_Damage
																							Temp2 = projectile_ARorMR
																							Temp3 = projectile_Element

																							//@comment "Perk:Grimreaper"
																							@if s[167].isOff() { // not applied to static
																								@if `agent_PerkFlagBits2 & 262144 {
																									//@comment "#CheckCrit"
																									/* @comment "Var1 = Obj 1~V[421] = ダメージ倍率" */
																										v[421] = agent_ProcessCrit >> 1 + (2 - victim_CritChanceReduction) >= rnd(0, 99) ? 450 - victim_CritDamageReduction : 100

																								}
																							}

																							//@comment "AABits"
																							var9 = projectile_bits1
																							v[422] = projectile_weapontype
																							@call .cev 40 // call the damage cal.
																							reg10 = 1
																							Ptr20 = v[36]


																					} .else bl { //@comment "Miss!"
																						// LEGACY_projectile_miss_GFX()
																					}

																				//@comment "#Parent Agent"
																				Ptr19 = projectile_ParentObject
																					//@comment "#HitFuncあれば呼ぶ"
																					@if projectile_CallFuncHit > 0 {
																							projectile_ProjectileFlag1 &= -3//~2
																							s[122].on
																							v[423] = v[214]

																							// check
																							__if DEBUG_BUILD == 1 {
																								@if v[538] != projectile_CallFuncHit {
																									func_devlog("Projectile hit and Cev called - ID:\v[\v[740304]]")
																										v[538] = projectile_CallFuncHit
																								}
																							}

																							// back up to savebuffer
																							// set Ptr20 again
																							Ptr20 = v[ProjectileHitChecker]
																							LEGACY_extract_projectile_data_to_agent_buffer() // retard retard retard retard 
																							@call .cev projectile_CallFuncHit
																							// load up backup buffer
																							v[214] = v[423]
																							s[122].off

																					}

																					//@comment "Hit Limit check"
																					projectile_HitCount += 1
																					projectile_ProjectileType = projectile_HitCount == projectile_HitLimit ? 1 : projectile_ProjectileType
																					@if projectile_ProjectileType == 1 {
																							projectile_Timer = 0
																							@break
																					}

																			}

																		}

																	}

																}


														}

												}

										}
										//@comment "ピクチャ番号"
										Temp3 = v[4560] + v[214]

										//opt 28.4.23
										@if `!(projectile_ProjectileFlag1 & PROJ_FL1_NoPicture) {
												//@comment "#add angle delta"
												TT2 = 1 // mirro fl
												@if projectile_AngleDelta != 0 {
														projectile_Angle += s[2] == 0 ? projectile_AngleDelta : 0
														TT2 = projectile_milVx >= 0 ? 1 : 0
												}
												//@comment "#MirrorFlag#4096"
												v[457] = TT2 * 4096
												//@comment "#Lightening #512"
												v[457] |= 256 * projectile_Drawtype // this flag should be changed I suppose?
												//@comment "#Colors"
												v[449].repeat 100,4
												v[449] .add projectile_R, 4
												@cmd 11120, "", .args v[441], 22

										}

									//@comment "時間切れ消滅処理"
									@if projectile_Timer <= 0 { // life time is over
											@pic[Temp3].erase
											@if projectile_CallFuncHit > 0 {
												@if `projectile_ProjectileFlag1 & 2 {
													s[122].on
														//@comment "#Parent Agent"
														Ptr19 = projectile_ParentObject
														v[423] = v[214]
														projectile_RelativeX.copy v[607], 2 // legacy feature, should be removed
														func_devlog("Projectile removed and Cev called - ID:\v[740604]")
														@call .cev projectile_CallFuncHit
														v[214] = v[423]
														s[122].off

												}

											}
										// init all
										v[1301].copy projectile_ProjectileType, 100
									}
									


								}
								// save back alas
								projectile_ProjectileType.copy v[Projectile_Ptr],100
						}

				}



}


/**
 *
 * @return {int} reg1 - 0:nothit, 1:hit
 */
__fn projectile_hitcheck_rectangle {
	reg1 = (abs(projectile_RelativeX - victim_RelativeX) < projectile_Width + victim_Width && abs(projectile_RelativeY - victim_RelativeY) < projectile_Height + victim_Height)

}


__fn LEGACY_extract_projectile_data_to_agent_buffer {
	projectile_ProjectileType.copy v[601], 100
}

__fn LEGACY_projectile_miss_GFX {

	// oh fugg
	@if `s[Ptr20 + 500] && v[183] < v[4572] {
			v[381].copy v[221], 2
			@if reg2 == 1 {
				reg10 = 2
					// @comment "Shield Blocked!"
					reg3 = 0
					// @comment "Shield Cracking"
					Ptr20 = v[ProjectileHitChecker]
					@if `projectile_bits1 & 1024 {
						/* @comment "＃＃＃＃＃＃＃＃＃＃Get Shield Break Resistance＃＃＃＃＃＃＃＃＃＃"*/
						TT1 = victim_ShieldBreakResistance
							@if `victim_PerkFlagBits1 & 1 { // shield wall perk
								TT1 += TT1 >> 2 // + 25%

							}
						/*@comment "＃＃＃＃＃＃＃＃＃＃Chance Roll＃＃＃＃＃＃＃＃＃＃"*/
						reg1 = projectile_Damage / 3
							@if `projectile_bits1 & 131072 {
								reg1 *= 2

							}
						/*@comment "＃＃＃＃＃＃＃＃＃＃Roll!＃＃＃＃＃＃＃＃＃＃"*/
						TT3 = rnd(0, reg1)
							@if TT3 >= TT1 {
								//@comment "#バフ番号指定"
								/*9.3.23
									var1 = 1258
									var2 = Ptr20*/
								func_bs_register_buff_old(1258 Ptr20)
									@if reg2 >= 0 {
										reg3 = 1
											//@comment "#Duration24sec"
											v[reg2] = 1344

									}

							}

					}
				@if reg3 == 0 {
					@if v[182] <= 2 {
						//@comment "#########################"
							v[472] = divmul(60, 100, v[2216])
							v[473] = rnd(115, 120)
							v[474] = divmul(v[381] + v[1001], v[1281], 50)
							@cmd 11550, "weapons/shield_hit", .args v[472], 3
							//@comment "#########################"

					}

				} .else bl {
					@if v[182] <= 3 {
						//@comment "#########################"
						v[472] = divmul(78, 100, v[2216])
							v[473] = rnd(87, 100)
							v[474] = divmul(v[381] + v[1001], v[1281], 50)
							@cmd 11550, "weapons/shield_cracked01", .args v[472], 3
							//@comment "#########################"

					}

				}

				// KUSO
				//@comment "Call Shield"
					TT2 = Ptr20 * 300 
					TT2 += 4952
					v[TT2 + 32] = v[TT2] > 0 ? 4 : 0
					//@comment "#Shield Motion"
					TT2 = Ptr20 * 300 
					TT2 += 4943
					@if v[TT2] != 1 {
							v[TT2] = 2
								TT2 -= 215
							v[TT2] += v[TT2] < 300 ? 900 : 0

					}

				@if s[307] .isOff() {
					@if `v[183] < v[4572] / 2 {
							//@comment "#描画範囲内か？"
							v[220] %= 30
							v[220] += 1201
							v[220] += 1
							v[223] = v[220]
							v[221] += rnd(-6, 6)
							v[222] += rnd(-3, 3)
							v[222] += s[162] == 1 ? 10 : 0
							//@comment "#サイズは最低100%"
							v[225] = 100
							//@comment "AR"
							TT1 = v[1204] - 10
							@pic[v[223]].show {
								PATH_pic_numdir_block
									.pos v[221], v[222] .center
									.scrollWithMap
									.chromakey 1
									.scale v[225]
									.trans TT1
									.rgbs 100, 100, 100, 100
									.mapLayer 7
									.eraseWhenTransfer
									.affectedByFlash
									.affectedByShake
							}
						v[222] = v[382] - 24
							v[222] += s[162] == 1 ? 10 : 0
							@pic[v[223]].move {
								.pos v[221], v[222] .center
									.scale v[225]
									.trans 100
									.time 12
									.rgbs 100, 100, 100, 100
							}
						v[183] += v[184] >= v[1128] ? 2 : 1

					}

				}

			} .else bl {
				@if s[307] .isOff() {
					@if `v[183] < v[4572] / 2 {
						//@comment "#描画範囲内か？"
						v[220] %= 30
							v[220] += 1201
							v[220] += 1
							v[223] = v[220]
							v[221] += rnd(-6, 6)
							v[222] += rnd(-3, 3)
							v[222] += s[162] == 1 ? 10 : 0
							//@comment "#サイズは最低100%"
							v[225] = 100
							//@comment "AR"
							TT1 = v[1204] - 10
							@pic[v[223]].show {
								PATH_pic_numdir_miss
									.pos v[221], v[222] .center
									.scrollWithMap
									.chromakey 1
									.scale v[225]
									.trans TT1
									.rgbs 100, 100, 100, 100
									.mapLayer 7
									.eraseWhenTransfer
									.affectedByFlash
									.affectedByShake
							}
						v[222] = v[382] - 24
							v[222] += s[162] == 1 ? 10 : 0
							@pic[v[223]].move {
								.pos v[221], v[222] .center
									.scale v[225]
									.trans 100
									.time 12
									.rgbs 100, 100, 100, 100
							}
						v[183] += v[184] >= v[1128] ? 2 : 1

					}

				}

			}

	}


}
