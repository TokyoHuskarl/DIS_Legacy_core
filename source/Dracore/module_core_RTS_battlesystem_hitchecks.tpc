
//9.3.23
//cev 42

def ranged_base_hit = 25 //38 

__fn macro_extract_units_parameters {
	//TEMPORARY
	reg1 = Ptr9 + 4701
	v[reg1].copy agent_ObjectType, 300
	reg1 = Ptr10 + 4701
	v[reg1].copy victim_AgentType, 300 //only 20

}

// common
__fn func_bs_melee_hit_check $attacker $victim {
	Ptr9 = $attacker * 300
	Ptr10 = $victim * 300

	macro_extract_units_parameters()

	func_bs_melee_hit_check_wo_prep()

}


// already got agent datas on agent buffer/victim buffer
__fn func_bs_melee_hit_check_wo_prep {

	@if agent_Direction == victim_Direction {//back attack!
	    s[164].on
	    
	} .else bl {
	    s[164].off
	    
	}

	//@comment "HITを取得"
	val_asg(Temp1,agent_ProcessHIT)
	//get evasion
	val_asg(reg1,victim_ProcessEVA) // reg1 = victim_ProcessEVA
	//@comment "#################GetParaNow v1v2r1 END#################"
	//@comment "#DodgeMS*12%"
	reg1 += victim_PerkFlagBits1 & 32 ? victim_ProcessMS >> 3 : 0 //muldiv(victim_ProcessMS, 12, 100) : 0
	//@comment "＃＃＃＃＃＃＃＃＃＃Elevation Bonus＃＃＃＃＃＃＃＃＃＃"
	Temp20 = agent_getTerrainElevation - victim_getTerrainElevation
	//@comment "＃＃＃＃＃＃＃＃＃＃BackAttack Bonus＃＃＃＃＃＃＃＃＃＃"
	Temp1 += agent_Direction == victim_Direction ? 15 : 0 //
	// Temp1 += s[164] << 4 //  16
	//@comment "＃＃＃＃＃＃＃＃＃＃Base Hit Per...10% min5% max95%＃＃＃＃＃＃＃＃＃＃"
	Temp1 += 10 - reg1 + 5 * Temp20
	Temp1 = max(5, min(95, Temp1))
	//@comment "＃＃＃＃＃＃＃＃＃＃Roll!	＃＃＃＃＃＃＃＃＃＃"
	Temp3 = rnd(1, 100)
	reg1 = Temp3 <= Temp1 ? 1 : 0
	@if reg1 == 0 {
	    //@comment "＃＃＃＃＃＃＃＃＃＃Check Shield?	＃＃＃＃＃＃＃＃＃＃"
	    //@comment "Shieldを取得 302	...ADVに先行で算入されている"
	    Temp2 = 100 - victim_Shield_Value//shield value..
	    reg2 = Temp3 >= Temp2 ? 1 : 0
	    @if reg2 == 0 {
		@if s[164] .isOff() {
		    //@comment "Parry chance"
		    //v[874] = Ptr10 + 4974
		    @if `victim_ProcessObjBit & 16777216 {
			@if victim_AAType == 0 { //not ranged type?
			    reg2 = rnd(1, 100) <= victim_ProcessHIT / (victim_ProcessObjBit & 131072 ? 2 : 3) + 16 ? 2 : 0
			    
			}
			
		    }
		    
		}
		
	    }
	    
	}

}

def{
bs_hitcheck_FLAG_ArrowMode = 0x1

}

__fn func_bs_ranged_hit_check $attacker $victim $dir $flags $aux_var {
	Ptr9 = $attacker * 300
	Ptr10 = $victim * 300
	__if $flags & bs_hitcheck_FLAG_ArrowMode {
		defv var_funcbs_rhc_arrow_hitbonus = __id(var6)
		var_funcbs_rhc_arrow_hitbonus = $aux_var //secure - if it's arrow type, load saved arrow hit bonus
	}
	macro_extract_units_parameters()
	// @comment "HITを取得"
	val_asg(Temp1,agent_ProcessHIT) // Temp1 = agent_ProcessHIT
	// @comment "AVD/4を取得"

	get_base_rangedEVA(victim_ProcessEVA,victim_PerkFlagBits1,victim_ProcessMS) // <-header_battlesystem.tpc

	// @comment "＃＃＃＃＃＃＃＃＃＃Elevation Bonus＃＃＃＃＃＃＃＃＃＃"
	Temp20 = min(agent_getTerrainElevation - victim_getTerrainElevation, 3)//3 at highest
	Temp1 += 7 * Temp20
	// @comment "＃＃＃＃＃＃＃＃＃＃Check Shield?＃＃＃＃＃＃＃＃＃＃"
	// @comment "Shieldを取得 302...ADV/4+302*2"
	val_asg(Temp2,victim_ShieldRangedProtection) // Temp2 = victim_Shield_Value


	@if Temp2 > 0 { //if victim has shield
		@if `victim_ProcessObjBit & 67108864 { //check if broken
			v[ptr_null].copy Temp2,1 // Temp2 = 0

 
		}.else bl { // not broken
			Temp4 = victim_TacticsOrderFlag & 6 ? victim_ShieldRangedProtection >> 1 : 0
			val_add(Temp2,Temp4) // if it's forming shield wall, +50% of shield ranged value
			//if you're covered with shield wall brother ... then?
			
		}

	}.else bl{
		v[ptr_null].copy Temp2,1 // Temp2 = 0
	}

	//If you covered by ally's shield, you will gain+8 shield value, even if you don't have any shield
	@if `victim_ProcessInstantState & agent_ProcessInstantState_FLAG_shield_covered_double_check {
		val_add(Temp2,N8) // Temp2 += 8
		//@comment "BackAttack halves evasion chance when the agent is covered by ally shieldwall"
		reg1 = (reg1 + Temp2) >> ($dir == victim_Direction)
		val_add(reg1,N4) // reg1 += 4


	}.else bl{
		//@comment "BackAttack one-thirds evasion chance"
		reg1 = (reg1 + Temp2) / ($dir == victim_Direction ? 3 : 1)

	}

	Temp3 = rnd(1, 100)
	reg2 = Temp3 >= 100 - Temp2 ? 1 : 0
	//@comment "＃＃＃＃＃＃＃＃＃＃Base Hit Per... once 38% but now far lower than that"
	__if $flags & bs_hitcheck_FLAG_ArrowMode {
		Temp1 += var_funcbs_rhc_arrow_hitbonus - reg1
	}.else bl{
		// Temp1 += ranged_base_hit - reg1
		val_sub(Temp1,reg1)
		Temp1 += ranged_base_hit
	}

	Temp1 = max(1, min(99, Temp1))
	//against ambushed unit, accuracy is halved
	Temp1 >>= (victim_ProcessObjBit & 1) //fixed BETA2
	//@comment "＃＃＃＃＃＃＃＃＃＃Roll!＃＃＃＃＃＃＃＃＃＃"
	reg1 = Temp3 <= Temp1 ? 1 : 0
}

__fn func_bs_dummy_hit_check {
	val_asg(reg1,N1) // reg1 = 1

}

__fn func_bs_mind_hit_check $attacker $victim{
	Ptr10 = $victim *300
	reg1 = Ptr10 + 4960
	reg1.copy victim_Morale, 20
	//@comment "＃＃＃＃＃＃＃＃＃＃memo	＃＃＃＃＃＃＃＃＃＃"
	//@comment "V1=spell power"
	//@comment "#そのうち処理作る"
	//@comment "#################GetParaNow v1v2r1 END#################"
	val_asg(Temp1,var1) // Temp1 = var1
	//@comment "#################	GetWillPower#################"
	val_asg(reg1,victim_ProcessWill) // reg1 = victim_ProcessWill //v[Ptr20 * 300 + 4975]

	//@comment "＃＃＃＃＃＃＃＃＃＃	Base Hit Per...10%	min5% max95%	＃＃＃＃＃＃＃＃＃＃"
	Temp1 -= reg1
	var2 = victim_ProcessObjBit//v[Ptr20 * 300 + 4974]
	@if s[319] .isOn() {
	    Temp1 -= reg1 >= 150 || var2 & 4198400 ? 9999 : 0 //var2 & 4096 || var2 & 4194304
	    //Too much will or mindless makes unit immune to mind attack 
	    
	}
	//@comment "＃＃＃＃＃＃＃＃＃＃	Roll!	＃＃＃＃＃＃＃＃＃＃"
	reg1 = rnd(1, 100) <= Temp1 ? 1 : 0
}



__fn bs_shield_crack_check {
	// "＃＃＃＃＃＃＃＃＃＃Get Shield Break Resistance＃＃＃＃＃＃＃＃＃＃"
	val_asg(TT1,victim_ShieldBreakResistance) 
	TT1 += victim_PerkFlagBits1 & 1 ? victim_ShieldBreakResistance >> 2 : 0
	// "＃＃＃＃＃＃＃＃＃＃Chance Roll＃＃＃＃＃＃＃＃＃＃"
	reg1 = agent_ProcessAD / 3
	reg1 *= agent_AABits & AABits_FLAG_CrackingShieldBONUS ? 2 : 1

	// "＃＃＃＃＃＃＃＃＃＃Roll!＃＃＃＃＃＃＃＃＃＃"
	TT3 = rnd(0, reg1)
}
