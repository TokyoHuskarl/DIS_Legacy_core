<<<<<<< HEAD
__fn func_pathfinding_move(){
	// "移動指示	Center(x.y)=(wheretox,wheretoy)"
	v[2878] = v[1212]
	v[390] = 0
	@if v[2875] >= 1 {
	    // "WPをとおる"
	    v[2863].copy v[2861], 2
	    v[2865].copy v[2863], 2
	    v[2867].copy v[2865], 2
	    v[2869].copy v[2867], 2
	    v[2871].copy v[2869], 2
	    v[2873].copy v[2871], 2
	    // "#Set 移動するX"
	    // "#Set 移動するY"
	    v[2851].copy v[2873], 2
	    
	}
	@loop .inf() {
	    @if v[v[2878]] == 0 {
		// "とぎれた"
		@break
		
	    }
	    // "配列ゲット"
	    v[301] = v[v[2878]] * 300 
	    v[301] += 4700
	    v[300] = v[301] + 242
	    v[299] = v[301] + 41
	    v[298] = v[301] + 42
	    v[297] = v[301] + 18
	    v[295] = v[301] + 241
	    v[294] = v[301] + 55
	    v[629] = v[301] + 29
	    @if v[v[297]] > 0 {
		// "if you have obj"
		@if v[v[295]] == 2 {
		    v[v[300]] = 2
		    
		} .else bl {
		    v[v[300]] = 3
		    @if `v[v[301] + 3] & 33554432 {
			
		    } .else bl {
			v[v[301] + 3] &= -16777217//~16777216
			
		    }
		    
		}
		@if `!(v[v[301] + 3] & 4194304) {
		    @if v[2875] == 0 {
			v[v[300]] = 2
			
		    }
		    
		}
		
	    }
	    @if s[279] .isOn() {
		v[v[300]] = 1
		v[v[301] + 3] &= -16777217//~16777216
		@if `v[v[301] + 3] & 33554432 {
		    v[v[301] + 3] |= 8388608
		    v[v[301] + 34] |= 8388608
		    
		}
		
	    }
	    @if v[2875] >= 1 {
		v[293] = 2873
		v[293] -= v[2875] * 2
		@loop v[2875] {
		    v[v[293]].copy v[v[299]], 2
		    v[293] += 2
		    v[299] += 2
		    
		}
		
		v[v[293]].copy v[v[299]], 2
		// "#Set 現在目指してるWPと総WP数"
		v[v[294]] = v[2875]
		v[2873] .add v[2855], 2
		
	    } .else bl {
		// "#Set 移動するX"
		v[v[299]] = v[2851]
		// "#Set 移動するY"
		v[v[298]] = v[2852]
		// "#Set 現在目指してるWPと総WP数"
		v[v[294]] = -1
		v[2851] .add v[2855], 2
		
	    }
	    v[293] = v[301] + 245
	    v[v[293]] = 0
	    // "Make 2nd line"
	    v[390] += 1
	    v[390] %= v[2859]
	    @if v[390] == 0 {
		@if v[2875] >= 1 {
		    v[2853].copy v[2873], 2
		    v[2873] .add v[2857], 2
		    
		} .else bl {
		    v[2853].copy v[2851], 2
		    v[2851] .add v[2857], 2
		    
		}
		v[2851].copy v[2853], 2
		
	    }
	    @if `v[v[301] + 1] <= 8 {
		v[v[301] + 3] = v[v[301] + 241] <= 4 ? [v[v[301] + 3] | 1048576, v[v[301] + 3] | 1048576, v[v[301] + 3] & ~1048576, v[v[301] + 3] | 1048576, v[v[301] + 3] & ~1048576][v[v[301] + 241]] : v[v[301] + 3]
		
	    }
	    v[2878] += 1
	    
	}

	v[2861..2875] = 0
	v[2875] = 0
}

__fn func_pathfinding_open_Node(){
	// "check"
	v[380] = 0
	v[310] = v[4582]
	v[309] = v[4568]
	v[310] += v[309]
	@loop v[4582] .dst v[310] {
	    v[311] = v[4568] + v[310]
	    @if v[v[311]] == v[19] {
		v[380] = 1
		v[311] += 40000
		// "compare cost"
		@if v[v[311]] > v[20] {
		    v[v[311]] = v[20]
		    v[v[4600] + v[19] - 1] = v[4590]
		    
		}
		@break
		
	    }
	    
	}

	/*
	@if s[1] .isOn() {
	    @while v[309] <= v[310] {
		//opt 28.4.23
		//v[311] = (v[309] + v[310]) / 2
		v[311] = (v[309] + v[310]) 
		v[311] /= 2
		@if v[v[311]] == v[19] {
		    v[380] = 1
		    v[311] += 40000
		    // "compare cost"
		    @if v[v[311]] > v[20] {
			v[v[311]] = v[20]
			
		    }
		    @break
		    
		} .else bl {
		    @if v[v[311]] < v[19] {
			v[309] = v[311] + 1
			
		    } .else bl {
			v[310] = v[311] - 1
			
		    }
		    
		}
		
	    }
	    
	    
	}
	*/

	v[310] = v[4583]
	v[309] = v[4567]
	v[310] += v[309]
	@while v[309] <= v[310] {
	    //opt 28.4.23
	    //v[311] = (v[309] + v[310]) / 2
	    v[311] = (v[309] + v[310]) 
	    v[311] /= 2
	    @if v[v[311]] == v[19] {
		v[380] = 1
		@break
		
	    } .else bl {
		@if v[v[311]] < v[19] {
		    v[310] = v[311] - 1
		    
		} .else bl {
		    v[309] = v[311] + 1
		    
		}
		
	    }
	    
	}

	@if v[380] == 0 {
	    v[v[4568] + v[4582]] = v[19]
	    v[v[4555] + v[4582]] = v[20]
	    v[v[4600] + v[19] - 1] = v[4590]
	    v[4582] += 1
	    
	}
}

__fn func_pathfinding_remove_OpenNode(){
	v[310] = v[4582]
	v[309] = v[4568]
	v[310] += v[309]
	@while v[309] <= v[310] {
	    //opt 28.4.23
	    //v[311] = (v[309] + v[310]) / 2
	    v[311] = (v[309] + v[310]) 
	    v[311] /= 2
	    @if v[v[311]] == v[19] {
		v[0] = v[v[311]..v[4568] + v[4582]] = v[v[311] + 1..v[4568] + v[4582] + 1]
		v[0] = v[v[311] + 200..v[4555] + v[4582]] = v[v[311] + 201..v[4555] + v[4582] + 1]
		v[4582] -= 1
		@break
		
	    } .else bl {
		@if v[v[311]] < v[19] {
		    v[310] = v[311] - 1
		    
		} .else bl {
		    v[309] = v[311] + 1
		    
		}
		
	    }
	    
	}
}

//LEGACY cev setting
cev .id(1771), .name("PathfindingFunc:Move") , {   
	func_pathfinding_move()
}
cev .id(1772), .name("PathfindingFunc:Open Node") , {   
	func_pathfinding_open_Node()
}
cev .id(1773), .name("PathfindingFunc:Remove Opened Node") , {   
	func_pathfinding_remove_OpenNode()
}
=======

// Raycast
__fn func_nodecheck_RayCast $X0 $Y0 $X1 $Y1 {

	// use Bresenham's line algorithm to check line from Point1 to Point2
	// use common vars to caluculate
	defv {
		RC_deltax = __id(TT1)
		RC_deltay = __id(TT2)

		RC_x = __id(TT3)
		RC_y = __id(TT4)
		RC_err = __id(TT5)

		RC_swapx = __id(TT6)
		RC_swapy = __id(TT7)
		RC_err2 = __id(TT8) 
	}

	// RC_deltax = abs($X1 - $X0)
	RC_deltax = ($X1 - $X0)
	RC_deltax = abs(RC_deltax)

	// RC_deltay = abs($Y1 - $Y0)
	RC_deltay = ($Y1 - $Y0)
	RC_deltay = abs(RC_deltay)
	RC_deltay *= -1 // only -(dy) used in this proc, so make RC_deltay = (dy * -1) initially to optimize in RM system
	
	RC_swapx = $X0 < $X1 ? 1 : -1
	RC_swapy = $Y0 < $Y1 ? 1 : -1
	RC_err = RC_deltax + RC_deltay

	RC_x = $X0
	RC_y = $Y0

	// get Start Node Ptr
	defv RC_PF_NodePtr = __id(TT9)
	RC_PF_NodePtr = LEGV_MapNodeAmountX * RC_y
	RC_PF_NodePtr += RC_x
	RC_PF_NodePtr *= Node_Data_Size
	RC_PF_NodePtr += RMconst_Node_Array_Address_Start_MINUS_NODE_MEMSIZE

	@loop bl {
	
		// reach the goal coordinate
		// if the agent can reach there, it doesn't matter whether the goal node is wall or not
		@if RC_x == $X1 {
			@if RC_y == $Y1 {
				reg1 = 0 // no obstacle found, return 0
				@break
			}
		}
		

		/* check node information of the coordinate */
		v[RC_PF_NodePtr].copy mapnode_RefMapX, 3 // Node[2] is movement cost that we need
		@if mapnode_MovementCost >= Node_Obstacle_Threshold {
			reg1 = 1 // return 1
			@break
		}
	

		RC_err2 = RC_err * 2
		
		@if RC_err2 > RC_deltay {
			RC_err += RC_deltay // -(dy)
			RC_x += RC_swapx
			// Node X diff
			RC_PF_NodePtr += RC_swapx * Node_Data_Size
		}

		@if RC_err2 < RC_deltax {
			RC_err += RC_deltax
			RC_y += RC_swapy
			// Node Y diff
			// use reg1 to temp var
			reg1 = RC_swapy * LEGV_MapNodeAmountX
			RC_PF_NodePtr += reg1 * Node_Data_Size
		}
		
	}

}



// maybe movement order itself should be combined in one
// __fn func_pathfinding_move(){}

__fn func_pathfinding_move(){
	// "移動指示	Center(x.y)=(wheretox,wheretoy)"

	v[2878] = v[1212]
	v[390] = 0
	@if v[2875] >= 1 {
	    // "WPをとおる"
	    v[2863].copy v[2861], 2
	    v[2865].copy v[2863], 2
	    v[2867].copy v[2865], 2
	    v[2869].copy v[2867], 2
	    v[2871].copy v[2869], 2
	    v[2873].copy v[2871], 2
	    // "#Set 移動するX"
	    // "#Set 移動するY"
	    v[2851].copy v[2873], 2
	    
	}

	// experimental - check if the target coordinate is in map or not
	//to deal with the crash bug in 1.162BETA2
	macro_ck_if_given_rel_coord_is_inside_map(v[2851],v[2852])

	// if the coord is inside map...
	@if reg1 != 1 {
		// then start the movementa order
		@loop .inf() {
		    @if v[v[2878]] == 0 {
			// "とぎれた"
			@break
			
		    }
		    // "配列ゲット"
		    Temp1 = v[v[2878]] * 300 
		    Temp1 += 4700
		    Ptr20 = Temp1 + 242
		    v[299] = Temp1 + 41
		    v[298] = Temp1 + 42
		    v[297] = Temp1 + 18
		    Ptr15 = Temp1 + 241
		    v[294] = Temp1 + 55
		    v[629] = Temp1 + 29
		    @if v[v[297]] > 0 {
			// "if you have obj"
			@if v[Ptr15] == 2 { // ATK
			    v[Ptr20] = 2
			    @if `v[Temp1 + 3] & AgentBits_FLAG_PF_walldetection_switch {
			    	v[Temp1 + 34] |= AI_routine_bits_FLAG_1secDelay_PF
			    }

			} .else bl { // OTHERWISE
			    v[Ptr20] = 3 // ForceMovement?
			    @if `v[Temp1 + 3] & AgentBits_FLAG_PF_walldetection_switch {
				v[Temp1 + 34] |= AI_routine_bits_FLAG_1secDelay_PF
			    } .else bl {
				v[Temp1 + 3] &= ~AgentBits_FLAG_NeedWpToReachObj
				
			    }
			    
			}
			@if `!(v[Temp1 + 3] & AgentBits_FLAG_ForcemoveFlag) {
			    @if v[2875] == 0 {
				v[Ptr20] = 2
				
			    }
			    
			}
			
		    }
		    @if s[279] .isOn() {
			v[Ptr20] = 1
			v[Temp1 + 3] &= ~AgentBits_FLAG_NeedWpToReachObj
			@if `v[Temp1 + 3] & AgentBits_FLAG_PF_walldetection_switch {
			    v[Temp1 + 3] |= AgentBits_FLAG_walldetected
			    // 
			    def Pathblock_AND_1secDelay = AI_routine_bits_FLAG_Pathblocked + AI_routine_bits_FLAG_1secDelay_PF
			    v[Temp1 + 34] |= Pathblock_AND_1secDelay
			    
			}
			
		    }
		    @if v[2875] >= 1 {
			v[293] = 2873
			v[293] -= v[2875] * 2
			@loop v[2875] {
			    v[v[293]].copy v[v[299]], 2
			    v[293] += 2
			    v[299] += 2
			    
			}
			
			v[v[293]].copy v[v[299]], 2
			// "#Set 現在目指してるWPと総WP数"
			v[v[294]] = v[2875]
			v[2873] .add v[2855], 2
			
		    } .else bl {
			// "#Set 移動するX"
			v[v[299]] = v[2851]
			// "#Set 移動するY"
			v[v[298]] = v[2852]
			// "#Set 現在目指してるWPと総WP数"
			v[v[294]] = -1
			v[2851] .add v[2855], 2
			
		    }
		    v[293] = Temp1 + 245
		    v[v[293]] = 0
		    // "Make 2nd line"
		    v[390] += 1
		    v[390] %= v[2859]
		    @if v[390] == 0 {
			@if v[2875] >= 1 {
			    v[2853].copy v[2873], 2
			    v[2873] .add v[2857], 2
			    
			} .else bl {
			    v[2853].copy v[2851], 2
			    v[2851] .add v[2857], 2
			    
			}
			v[2851].copy v[2853], 2
			
		    }
		    @if `v[Temp1 + 1] <= 8 {
			v[Temp1 + 3] = v[Temp1 + 241] <= 4 ? [v[Temp1 + 3] | AgentBits_FLAG_EnableBasicAI, v[Temp1 + 3] | AgentBits_FLAG_EnableBasicAI, v[Temp1 + 3] & ~AgentBits_FLAG_EnableBasicAI, v[Temp1 + 3] | AgentBits_FLAG_EnableBasicAI, v[Temp1 + 3] & ~AgentBits_FLAG_EnableBasicAI][v[Temp1 + 241]] : v[Temp1 + 3]
			
		    }
		    v[2878] += 1
		    
		}
	}
	v[2861..2875] = 0
	v[2875] = 0
}

__fn func_pathfinding_open_Node(){
	// "check"
	v[380] = 0
	Temp10 = v[4582]
	Temp9 = v[4568]
	Temp10 += Temp9
	@loop v[4582] .dst Temp10 {
	    Temp11 = v[4568] + Temp10
	    @if v[Temp11] == var9 {
		v[380] = 1
		Temp11 += 40000
		// "compare cost"
		@if v[Temp11] > var10 {
		    v[Temp11] = var10
		    // v[v[4600] + var9 - 1] = v[4590]
		    v[Const_save_var_PFNodesLinkMINUS1 + var9] = v[4590]
		    

		}
		@break
		
	    }
	    
	}


	Temp10 = v[4583]
	Temp9 = Const_save_var_ClosedNodesListHead
	Temp10 += Temp9
	@while Temp9 <= Temp10 {
	    //opt 28.4.23
	    //Temp11 = (Temp9 + Temp10) / 2
	    Temp11 = (Temp9 + Temp10) 
	    Temp11 /= 2
	    @if v[Temp11] == var9 {
		v[380] = 1
		@break
		
	    } .else bl {
		@if v[Temp11] < var9 {
		    Temp10 = Temp11 - 1
		    
		} .else bl {
		    Temp9 = Temp11 + 1
		    
		}
		
	    }
	    
	}

	@if v[380] == 0 {
			TT1 = v[4568] + v[4582]
	    v[TT1] = var9
			TT1 = v[4555] + v[4582]
	    v[TT1] = var10

	    // v[v[4600] + var9 - 1] = v[4590]
			TT1 = Const_save_var_PFNodesLinkMINUS1 + var9
			v[TT1] = v[4590]
	    v[4582] += 1
	    
	}
}


// this function seems unused I guess?
// WHAT THE FUCK IS Temp11?
__fn func_pathfinding_remove_OpenNode(){
	Temp10 = v[4582]
	Temp9 = v[4568]
	Temp10 += Temp9
	// searching TT11 I guess
	@while Temp9 <= Temp10 {
	    Temp11 = (Temp9 + Temp10) 
	    Temp11 /= 2
	    @if v[Temp11] == var9 {
		//ugh this one looks brutal
		// 
		v[0] = v[Temp11..v[4568] + v[4582]] = v[Temp11 + 1..v[4568] + v[4582] + 1]
		v[0] = v[Temp11 + 200..v[4555] + v[4582]] = v[Temp11 + 201..v[4555] + v[4582] + 1]
		v[4582] -= 1
		@break
		
	    } .else bl {
		@if v[Temp11] < var9 {
		    Temp10 = Temp11 - 1
		    
		} .else bl {
		    Temp9 = Temp11 + 1
		    
		}
		
	    }
	    
	}
}


__fn set_Path_gotten_from_jscontainer { // temporary
	Ptr5 = __id(reg3) // array with up to 7 elements deployed to reg2 by RTS.path.givePath(agentid). reg2 = path[0] = {length of array}.
	convert_Path_to_WP(reg2) // WPamount is given from js
	v[2071] = Adr_PFWayPointDeployArray_Head
	@if v[2875] > 6 { // only 6 wp an agent can hold
		v[379] = 0
		v[2875] = 6
	}

	// set waypoints to the agent
	@loop v[2875] .dst v[2064] {
		v[v[2071]].copy v[2851], 2
		v[2863].copy v[2861], 2
		v[2865].copy v[2863], 2
		v[2867].copy v[2865], 2
		v[2869].copy v[2867], 2
		v[2871].copy v[2869], 2
		v[2873].copy v[2871], 2
		v[2851].copy v[2873], 2
		v[2071] += 2
	}

}

__fn restore_path_from_nodes $firstnode $nodelisttail {
	
	defv {
		restorepath_CurrentNode =__id(var3) 
		restorepath_StartNode =__id(var4) 
	}
	restorepath_StartNode = $firstnode
	restorepath_CurrentNode = $nodelisttail

	v[379] = 0
	v[ptr_null].copy v[2066],2
	v[ptr_null].copy v[4350],31

	// loop until the last checknode  
	defv CurNodeMINUS1 = __id(Temp12)

	// use openNodes List to deploy path nodes, since there's no need to keep open nodes data till the next pf run
	Ptr5 = Const_save_var_OpenNodesListHead + NodesAmountLimit  
	Ptr5.copy Ptr6,1

	@while restorepath_CurrentNode > 0 .dst v[2064] {
		CurNodeMINUS1 = restorepath_CurrentNode - 1
		@if v[2064] > 0 {
			v[2065] = Const_save_var_PFNodesLink + CurNodeMINUS1
			// v[2065].deref v[2065],1 <- this seems needless.
			
			v[2066].copy v[2067],1
			v[2066] = restorepath_CurrentNode - v[v[2065]]
			@if v[2064] >= 10000 { // if there are too many nodes to restore 
					@break // emergency break
					
			}
			
		}

		// if you need to choose different direction to reach the current node
		@if v[2066] != v[2067] {
			// then this becomes possible WPs
			Ptr5 -= 1
			restorepath_CurrentNode.copy v[Ptr5],1
			
			// then get its pos and save
			// old proc that gets accords of all tracked nodes. it's left just in case you need to debug it
			__if DEBUG_BUILD == 1 {
				v[2070] += 1
				v[4592] = 0
				Temp11 = CurNodeMINUS1 * Const_save_var_NodeDataSize
				Temp11 += Const_save_var_NodeArrayHead
				v[Temp11].copy var1, 2
				@map[v[501]].setVehiclePos .boat .pos var1, var2 .retain
				reg2 = boat.scrx
				reg3 = boat.scry
				reg2 += 8

				DEBUG_RESTORED_PATH_VISUALIZE

				v[375] = v[2875] % 20 // mod 20 to limit variable space this proc would write
				v[2071] = Adr_PFWayPointDeployArray_Tail
				v[2071] -= v[375] * 2 
				reg2.copy v[v[2071]], 2
			}
			// count up possible WPs
			v[2875] += 1
		}

		restorepath_CurrentNode = Const_save_var_PFNodesLink + CurNodeMINUS1
		restorepath_CurrentNode.deref restorepath_CurrentNode,1
		
		@if restorepath_CurrentNode == restorepath_StartNode {
			@break
	
		}
		
	}

	convert_Path_to_WP(v[2875])
	@if v[2875] > 6 { // only 6 wp an agent can hold
		v[379] = 0
		v[2875] = 6
		
		
		
		// send rest path to js pf manager 
		// sending array v[Ptr7..Ptr6]
		PF_Manager_Loop_AgentPtr.deref var1,1 
		Ptr6 -= 1
		def JSCMD_GET_PATH_ARRAY = __str("RTS.path.storePath(\v[",__id(var1),"],getv([\v[",__id(Ptr7),"],\v[",__id(Ptr6),"]]))")
		eval_js(JSCMD_GET_PATH_ARRAY)
		// deblog_js(js_StringBuffer)
	
	}

}

__fn convert_Path_to_WP $WPamt {
	__if (__id($WPamt) != __id(v[2875])) {
		v[2875] = $WPamt
	}
	var1 = min(v[2875],6)
	Ptr8 = Adr_PFWayPointDeployArray_Head
	Ptr5.copy Ptr7,1 // copy to Ptr7 just in case Ptr5 would be needed later

	@loop var1 {
		CurNodeMINUS1 = v[Ptr7] - 1
		v[2070] += 1
		v[4592] = 0
		Temp11 = CurNodeMINUS1 * Const_save_var_NodeDataSize
		Temp11 += Const_save_var_NodeArrayHead
		v[Temp11].copy var1, 2
		@map[v[501]].setVehiclePos .boat .pos var1, var2 .retain
		reg2 = boat.scrx
		reg3 = boat.scry
		reg2 += 8

		reg2.copy v[Ptr8], 2	
		// msg("\v[287]のざぎょうを\v[288]に書きました")
		Ptr7 += 1
		Ptr8 += 2
	}

}


def DEBUG_RESTORED_PATH_VISUALIZE = {
	__if DEBUG_BUILD == 1 {
			def DEBSTRING_V2070 = __str("\v[","2070","]")
			@pic[v[2070]].strpic {
				DEBSTRING_V2070
				.pos reg2, reg3 .center
				.size 32, 32                        .scrollWithMap
				.chromakey 1
				.scale 100
				.trans 10
				.rgbs 200, 200, 100, 100
				.font "", 12 .bold
				.spacing 0, 4
				.skin "" .nobg .noframe .noPadding
				.mapLayer 7
				.eraseWhenTransfer
				.affectedByFlash
				.affectedByShake
			}
			
	}

}


__fn pf_agent_move {

	v[2861] .sub v[1021], 14
	v[380] = 0
	@if `pfagent_AgentBits & AgentBits_FLAG_PF_walldetection_switch {
			// "Reset Grouppath"
			TT1 = Pathfinding_AgentData_head_ptr + 34
			v[TT1] &= -16777217 //~16777216
			v[TT1] |= AI_routine_bits_FLAG_1secDelay_PF

			v[ptr_null].copy v[LEGV_ConstAIselectedListHead],200
			v[LEGV_ConstAIselectedListHead] = v[4596] + 1
			v[2880] = LEGV_ConstAIselectedListHead + 1
			v[2841] = 1
			
	} .else bl {

			// If the agent belongs to a Cohort OR the agent team is NOT player
			//then set the agent cohort to Temp20
			v[320] = pfagent_Cohort_ID < 11 || v[Pathfinding_AgentData_head_ptr + 100] != 0 ? v[Pathfinding_AgentData_head_ptr + 35] : 0
			// ptr to agent_AI_routine_bits
			v[321] = Pathfinding_AgentData_head_ptr + 34

			// If the agent has cohort AND the Group path flag
			@if `v[320] > 0 && pfagent_AI_routine_bits & AI_routine_bits_FLAG_GroupPath {

				// "v1=Cohort	v2=Team, 0/1"
				var2 = Pathfinding_AgentData_head_ptr + 100
				var2 = v[var2]

				v[2861].copy v[2961], 15

				// save the first agent to Ptr17
				PF_Manager_Loop_AgentPtr.copy Ptr10,1

				@loop v[1012] .dst Temp1 {

					// "Check Enemy Team List"
					Ptr20 = Temp1 + v[1145 + var2]
					@if v[Ptr20] >= 1 {
						Ptr19 = v[Ptr20] * 300
						Ptr19 += 4735

						// "The unit belongs to the selected Cohort"
						@if v[Ptr19] == v[320] {
								
								//opt 27.4.23
								Ptr18 = v[Ptr20] * 300
								Ptr18 += 4734
								
								@if `v[Ptr18] & AI_routine_bits_FLAG_PATHFINDING { // PF continue is nolonger a condition
									@if `!(v[Ptr18 - 31] & AgentBits_FLAG_PF_walldetection_switch) {
											
											// not a path parent

											@if v[Ptr10] != v[Ptr20] {
												Ptr10.deref var1,1 
												Ptr20.deref var2,1 
												def JSCMD_COPY_PATH = __str("RTS.path.copyPath(\v[",__id(var1),"],\v[",__id(var2),"]",")")
												eval_js(JSCMD_COPY_PATH)
												// msg(js_StringBuffer)
											}

											// Ptr20.deref var2,1 
											// msg("hontoha \v[12]")
											v[Ptr18] &= ~AI_routine_bits_FLAG_GroupPath // kill GroupPathFlag anyway

											var1 = v[Ptr20]
											v[2880] = LEGV_ConstAIselectedListHead
											v[2841] = 0
											v[ptr_null].copy v[LEGV_ConstAIselectedListHead],200 //v[LEGV_ConstAIselectedListHead..LEGV_ConstAIselectedListHead + 199] = 0

											//CEV.. add agent to AI control list
											// @call .cev 1747
											v[v[2880]] = var1
											v[2880] += 1
											v[2841] += 1
											
											@if v[378] == -1 {
												v[Ptr18] |= AI_routine_bits_FLAG_Pathblocked
										
											} .else bl {
												v[Ptr18] &= KILL_AI_routine_bits_FLAG_Pathblocked //-8388609//~8388608
										
											}

											v[Ptr18] &= -16385 //~16384
											@if v[379] == 1 {
												v[Ptr18] &= -16859137//~16859136
										
											} .else bl { // got more than 6 WP to chase
												v[Ptr18] |= AI_routine_bits_FLAG_PFcontinue + AI_routine_bits_FLAG_PFskip

											}

											// wall detected, and?
											@if `!(v[Pathfinding_AgentData_head_ptr + 3] & AgentBits_FLAG_walldetected) || v[378] != -1 {
												v[Ptr18] |= 4096
												Temp16 = v[LEGV_ConstAIselectedListHead] * 300 
												Temp16 += 4741
												Temp17 = Temp16 + 14
												Temp17 = max(v[Temp17], 0)
												Temp16 += Temp17 * 2
												v[Temp16].copy v[2851], 2
												v[2961].copy v[2861], 15
												func_pathfinding_move()

											} .else bl {
												// stop pathfinding
												v[Pathfinding_AgentData_head_ptr + 34] &= AI_routine_bits_KILL_FLAG_PATHFINDING//-16385 ~16384
										
											}
											
									}
									
								}

						}
						
					}
					
				}
				
				v[380] = 1
				
			} .else bl {
				v[ptr_null].copy v[LEGV_ConstAIselectedListHead],200 //v[LEGV_ConstAIselectedListHead..LEGV_ConstAIselectedListHead + 199] = 0
				v[LEGV_ConstAIselectedListHead] = v[4596] + 1
				v[2880] = LEGV_ConstAIselectedListHead + 1
				v[2841] = 1
		
			}
			
	}
	// "####"

	//

	@if v[380] == 0 {
			// redeploy
			refresh_deployed_agent_data()

			@if `!(pfagent_AgentBits & AgentBits_FLAG_walldetected) || v[378] != -1 {

				// set up the point coordinate to move
				Temp16 = v[LEGV_ConstAIselectedListHead] * 300 
				Temp16 += 4741
				Temp17 = Temp16 + 14
				Temp17 = max(v[Temp17], 0)
				Temp16 += Temp17 * 2
				v[Temp16].copy v[2851], 2
				// pathfinding movement order
				func_pathfinding_move()
				
				// agent AI_routine_bit
				v[Pathfinding_AgentData_head_ptr + 34] |= AI_routine_bits_FLAG_tracing_flag
				
			} .else bl {
				// stop pathfinding
				// agent AI_routine_bit
				v[Pathfinding_AgentData_head_ptr + 34] &= AI_routine_bits_KILL_FLAG_PATHFINDING //~16384
				
			}

			// flag management after movement order
			// use buffers as pointers
			defv pfagent_Ptr_pfagent_AgentBits = __id(pfagent_AgentBits)
			pfagent_Ptr_pfagent_AgentBits = Pathfinding_AgentData_head_ptr + 3

			defv pfagent_Ptr_AI_routine_bits = __id(pfagent_AI_routine_bits)
			pfagent_Ptr_AI_routine_bits = Pathfinding_AgentData_head_ptr + 34


			// 
			@if v[379] == 0 {
				v[pfagent_Ptr_AI_routine_bits] |= AI_routine_bits_FLAG_PFcontinue + AI_routine_bits_FLAG_PFskip
		
			} .else bl {
				v[pfagent_Ptr_AI_routine_bits] &= AI_routine_bits_KILL_FLAG_PFcontinue //~32768
				// v[pfagent_Ptr_pfagent_AgentBits] &= ~AgentBits_FLAG_PF_walldetection_switch
		
			}

			// 
			@if v[378] == -1 {
				v[pfagent_Ptr_AI_routine_bits] |= AI_routine_bits_FLAG_Pathblocked
				v[pfagent_Ptr_pfagent_AgentBits] &= ~AgentBits_FLAG_PF_walldetection_switch

			} .else bl {
				v[pfagent_Ptr_AI_routine_bits] &= -8388609 //~8388608
		
			}
			
	}
	

}
>>>>>>> 88b5194136650670640ef002a8086e2b5f7f7357
