

//#####################
// Agent Extra Buffer(AEB) funcs
//#####################

// AEB simply just holds agent's additional parameters that are not very frequently called
// maybe making it have complicated function is not good for any term I suppose

// generation function -> @Mission Init in module_core_RTS_mission_general.tpc

// agentid here are expected in a range from 1 to Agents_Limit



// 8.8.2023
// The fact that kern commands of the AEB system have fatal bug in the processes where a MP user cannot touch nor deal with, so all AEAB system is gonna be abandoned.

def AEAB_abandon = {
	__if DIS_EXPERIMENTAL != -1 {
		func_errlog("AEAB function detected, these functions must be removed from DIS source code.")
	}

}
__fn set_AEB_element $agentid $setadd $slot {
	set_picture_pixel($setadd,PicID_AgentExBuffer,$slot,$agentid)
}

// set_AEB_array(int agentid, *var setadd, int startslot, int range)
__fn set_AEB_array $agentid $setadd $startslot $range {
	set_picture_horizontal_line($setadd,PicID_AgentExBuffer,$startslot,$agentid,$range)
}

__fn get_AEB_element $agentid $getadd $slot {
	get_picture_pixel($getadd,PicID_AgentExBuffer,$slot,$agentid)
}

__fn get_AEB_element_wo_ptr $agentid $getadd $slot {
	@pic.getInfo[PicID_AgentExBuffer] .pixel($slot, $agentid, 1, 1) .dst(v[$getadd])
}

__fn get_AEB_array $agentid $getadd $startslot $range {
	get_picture_horizontal_line($getadd,PicID_AgentExBuffer,$startslot,$agentid,$range)
}

__fn init_AEB_array $agentid {
	// fill selected array with 0
	set_picture_horizontal_line(__id(ptr_null), PicID_AgentExBuffer,0,$agentid,AgentExtraBuffer_ArraySize)
}




/**
 * cannot be used for static unit 
 * This function deploys agent data to victim array
 * 
 * @param {int} $agentid - 
 * @param {int} $unitid - 
 * @param {int} $flags - EXTRACT_FLAG_Data_extracted:0x1 
 */
__fn func_make_agent_transform_into_unit $agentid $unitid $flags {
	$FLAG_RECOVER_STATS = 0x2

	// copy agent data to victim array
	__if $flags & EXTRACT_FLAG_Data_extracted {
		agent_AgentType.copy victim_AgentType agent_Basic_Array_size
	}.else bl{
		var1 = $agentid * agent_Basic_Array_size
		var1 += 4701
		v[var1].copy victim_AgentType,agent_Basic_Array_size
	}

		// deploy unit data to agent_buffer
		v[251] = victim_TeamID
		v[255] = $agentid
		victim_RelativeX.copy v[252],2
		v[254] = $unitid

		BOOL_Gen_NoListAssigningFlag.on
		BOOL_Gen_GetMinionData.on
		s[152].on // retarded legacy switch
		func_generate_agent() // just get data
		BOOL_Gen_NoListAssigningFlag.off
		BOOL_Gen_GetMinionData.off

		// does this even work?
		func_drawing_agent_init_set_picture_strs($agentid)

		// TODO - change AEB values
		agent_reset_AI_target_priority_AEB($agentid)
		agent_reset_BaseSight_Root($agentid)
		agent_reset_MapEyeSight($agentid)



		
		agent_AgentType.copy victim_AgentType,3

		// set collision?
		agent_Width.copy victim_Width,2
		agent_set_ColBox($agentid)
		

		agent_MoveTypeBIts.copy victim_MoveTypeBIts,1
		agent_Skin.copy victim_Skin,7 // to head

		__if $flags & $FLAG_RECOVER_STATS {

		}.else bl {
				// use current HP and so on
				victim_HP = min(victim_HP,agent_MaxHP)
				victim_HP.copy agent_HP,1

				victim_SP = min(victim_SP,agent_MaxSP)
				victim_SP.copy agent_SP,1

				victim_BaseAR = min(victim_BaseAR,agent_MaxAR)
				victim_BaseAR.copy agent_BaseAR,1
		}

		agent_UnitID.copy victim_UnitID,140 // copy all basic data
		agent_MainWeaponID.copy victim_MainWeaponID,9 // copy equipments

		set_agent_name($agentid,str1)
	

	/*
	  rewrite data
	*/

	__if $flags & EXTRACT_FLAG_Data_extracted {
		victim_AgentType.copy agent_AgentType agent_Basic_Array_size
	}.else bl{
		var1 = $agentid * agent_Basic_Array_size
		var1 += 4701
		victim_AgentType.copy v[var1],agent_Basic_Array_size
	}

	__if DIS_DEBUG_BUILD == 1 {
		deblog(__str("func_make_agent_transform_into_unit: Try unit conversion to ", $unitid, "."))
	}

}


__fn func_extract_skill_data_from_agent_slot $agent $skillno $flags {
	__if $flags & EXTRACT_FLAG_Data_extracted {
		reg1 = $skillno * skill_Array_size
		reg1 += __id(agent_AACost)	
		v[reg1].copy skill_ID,skill_Array_size
	}.else bl{
		reg1 = $agent * 300
		reg1 += $skillno * skill_Array_size
		reg1 += 4821
		v[reg1].copy skill_ID,skill_Array_size
	}
}

//reg1 = 0:melee 1:ranged 2:magic... idk 
__fn func_get_AA_usage $agent $flags {
	__if $flags & EXTRACT_FLAG_Data_extracted {
		@if agent_AAType == 0 {//melee
			reg1 = 0
		}.elif agent_AAType == 2 {
			reg1 = 1
		}.elif agent_AAType == 4 {
			reg1 = agent_AA_ARorMR == 0 ? 1 : 2 
		}
		
	}.else bl{
		func_errlog("the function func_get_AA_usage not defined...")
	}
}


__fn set_agent_name $agentid $name {
	var1 = $agentid + Address_str_agent_name_array_head
	t[var1].asg $name
}



