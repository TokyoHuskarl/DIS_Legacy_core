#include "./../headers/header_common.tpc"


#include "./../headers/header_scripts.tpc"

// This weird shit will be gone after Scale Script completed
#include "./../headers/header_scripts_functions.tpc"



cev[2041], .name("DIS command interpriter"), .parallel , .cond(__id(BOOL_CMD_RUN)), {
	
	
	// split ORDER string given from js UI manager object 
	Str_CmdQueue.split(";", Str_Deploy_head, guiVar7)
	guiVar8 = __id(Str_Deploy_head)
	guiVar1 = 0
	@loop bl  {
		@if guiVar7 <= guiVar1 {@break} //

		//t[guiVar8].split(",", Str_Parsing, reg1)
		// - CUT -
		//Str_Parsing.toNum(guiVar2)

		// CHECK objtype 'n shiiiet
		DIS_Cmd_callPackageTree(SScmdDynCounter,guiVar8)

		//DIS_Cmd_map(DISmapCmdLink,SScmd_Mode_Exec,SScmdDynCounter,t[510],0)

		/* @if UIT == UIOBJ_checkbox { // simple checkbox
			UIT_checkbox_Render()

		}.elif ObjID == UIOBJ_simplesprite { // 

		}.elif ObjID == UIOBJ_strpic { // 
			UIT_strpic_Render()
		} */

		guiVar1 += 1
		guiVar8 += 1  // get current shit
	
	}
	Str_CmdQueue.asg "" // init 
	BOOL_CMD_RUN.off
}


cev .id(1821), .name("*MapScriptGeneral*"), {
	/*
	So einfach ist das.
		    */
	s[261].on
	t[510] .asg t[510] .extract
	t[510] .inStr "//", 321,  .beg 0
	// "#""//""Comment out"
	@if v[321] == -1 {
	    t[509].asg .subs(t[510],0,3)
	    @if t[509].eq "TPC"{
		
	    }.else bl{
		    @loop 1 {
			@if t[510] .contains "cond_" {
			    //@call .cev 1825
			    scripts_cond()
			    @break
			    
			}
			@if t[510] .contains "map_" {
			    //@call .cev 1824
			    scripts_map()
			    @break
			    
			}
			@if t[510] .contains "AI_" {
			    //@call .cev 1822
			    scripts_AI()
			    @break
			    
			}
			@if t[510] .contains "team_" {
			    //@call .cev 1823
			    scripts_team()
			    @break
			    
			}
			@if t[510] .contains "player_" {
			    //@call .cev 1826
			    scripts_player()
			    @break
			    
			}
			@if t[510] .contains "var_" {
			    //@call .cev 1827
			    scripts_var()
			    @break
			    
			}
			scripts_misc()
		    }
	    }
	    
	}
	s[261].off

}


cev .id(1840), .name("ScriptPreproc"), {

	t[800] .split t[525], t[v[1219]], v[505]
	@loop v[505] .dst v[506] {
	    v[11] = v[1219] + v[506]
	    t[v[11]] .split "=", t[3000], v[341]
	    @if v[341] == 2 {
		@if t[3000] .neq "" {
		    t[510] .asg  .rep t[510], t[3000], t[3001]
		    
		}
		
	    }
	    
	}

	t[801] .split t[525], t[v[1219]], v[505]
	@loop v[505] .dst v[506] {
	    v[11] = v[1219] + v[506]
	    t[v[11]] .split "=", t[3000], v[341]
	    @if v[341] == 2 {
		@if t[3000] .neq "" {
		    t[510] .asg  .rep t[510], t[3000], t[3001]
		    
		}
		
	    }
	    
	}

	t[802] .split t[525], t[v[1219]], v[505]
	@loop v[505] .dst v[506] {
	    v[11] = v[1219] + v[506]
	    t[v[11]] .split "=", t[3000], v[341]
	    @if v[341] == 2 {
		@if t[3000] .neq "" {
		    t[510] .asg  .rep t[510], t[3000], t[3001]
		    
		}
		
	    }
	    
	}

	t[803] .split t[525], t[v[1219]], v[505]
	@loop v[505] .dst v[506] {
	    v[11] = v[1219] + v[506]
	    t[v[11]] .split "=", t[3000], v[341]
	    @if v[341] == 2 {
		@if t[3000] .neq "" {
		    t[510] .asg  .rep t[510], t[3000], t[3001]
		    
		}
		
	    }
	    
	}

	t[3000..3001] .asg ""

}
