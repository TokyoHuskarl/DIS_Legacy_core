
/**
	* You need to deploy skill data to buffer before calling this function.
	* @function func_ai_skill_usage_check
	* @return {reg1} - if abort returns 1 
	*/
__fn func_ai_skill_usage_check {

	/* "TT1=vecX,TT2=vecY
	 Skill1_ID = 141
	 Skill1_func = 142
	 Skill1_type = 143#0 = passive, 1 = liner, 2 = Point, 3 = Target, 4 = AoE ,5=self, 6=passive
	 Skill1_usage = 144 # -1 = extra(bots never cast), 0 = damage, 1 = heal, 2 = buff, 3 = debuff, 4 = dash, 5 = blink
	 Skill1_motiontime = 145
	 Skill1_has_extramotion = 146
	 Skill1_cost = 147
	 Skill1_cooldown = 148
	 Skill1_targobj = 149
	 Skill1_targx = 150
	 Skill1_targy = 151
	 Skill1_range_max = 152
	 Skill1_range_min = 153
	 Skill1_stack1 = 154"*/

	// REFACTORING - inherit skill parameters extracted in func_CkIfSklCall
	
	@loop 1 {
	    // "Only when the unit is moving"
	    @if `skill_AutoCastFlags & 2 {
				@if agent_MovementOrder < 1 {
						val_asg(reg1,N1)
						@break
						
				}
				
	    }

			// not in melee
	    @if `skill_AutoCastFlags & 4 {
				@if agent_MeleeFightTimer > 0 {
						// "Only when the unit is not in melee combat"
						val_asg(reg1,N1)
						@break
						
				}
				@break
		
	    }

	    // "Dash type skill
	    @if skill_Usage == 4 {
				// "Archers and Mages Try Kiting with Dash skill"
				v[345..346] *= agent_AAType >= 1 ? -1 : 1
				
	    }
	    // "##AI casts dash/blink skills only when they are in aggressive stance "
	    reg1 = between(skill_Usage, 4, 5) && agent_StanceOrder != 0
	    
	}


}


// LEG define macro for this cev - maybe not needed anymore...
def macro_if_it_can_cast_then_do = {
	// TT2 = agent_TargetAgentID * 300 
	// TT2 += 4707
		victim_RelativeX.copy TT5, 2
		//Inherit what was extracted in func_CkIfSklCall()
		TT5 .sub agent_RelativeX, 2
}

// private? func
__fn _agentai_try_skill_slot $slot {
		// use TT5,TT6 as a vector to the skill target pos
		victim_RelativeX.copy TT5, 2
		//Inherit what was extracted in func_CkIfSklCall()
		TT5 .sub agent_RelativeX, 2

		$targx = 730 + 20 * $slot // address of skill target x <- CHECK if is this working 
		// TT1 = v[212] + 150
		func_ai_skill_usage_check()
		@if reg1 == 0 {
			TT1.repeat $targx,1 // TT1 = $targx
			TT5.copy v[TT1], 2 // copy TT5 to each skill XY

			// set which skill the agent going to cast
			// TT3 = v[212] + 246
			agent_CastSkillOrder.repeat $slot,1 // CastSkillOrd = $slot
			// save back
			agent_ObjectType.copy v[Ptr1],agent_Basic_Array_size
			@break

		}
}

// legacy cev
cev .id(1929) .name("AGENT:AI SKILL USAGE"){
	func_ai_skill_usage_check()
}

cev .id(12), .name("Agent:Skill AI") , .parallel , .cond(Const_Is_RTS_Mode), {
	@if s[2] .isOff() {
		v[536] = v[4532]
			@while v[v[536]] != 0 {
				func_extract_agent_vars(v[v[536]])
					@if agent_ActionTimer == 2 {

						@if `agent_AgentBits & AgentBits_FLAG_EnableBasicSkillAI { // has ordinary attack skill AI
							// maybe you can insert some procs here to implement script-driven skill AI. (use ScriptFlags)
								@if agent_TargetAgentID > 0 { // the agent has target
										// in free MovementOrder state
										@if agent_MovementOrder < 3 {
											// not in silence 
											@if `!(agent_AI_routine_bits & AI_routine_bits_FLAG_Manual_Ordered) {

												// leg set ptr
												v[212] = v[v[536]] * 300 
												val_add(v[212],N4700) // v[212] += 4700
												Ptr11 = v[v[536]] // asg agent id

												// dep victim param
												victim_AgentType = agent_TargetAgentID * agent_Basic_Array_size 
												val_add(victim_AgentType,N4701)
												v[victim_AgentType].copy victim_AgentType, agent_Basic_Array_size


												@loop 1 {
														//Temp9 = v[212] + 7
														agent_RelativeX.copy Temp4, 2
														// Temp1 = agent_TargetAgentID * 300 
														// Temp1 += 4707
														Temp4 .sub victim_RelativeX, 2
														Temp4 .mul Temp4, 2
														v[3401] = Temp4 + Temp5
														@if `!(v[760] & 1) && v[752] >= v[3401] {
															//var1 = Ptr11
															//var2 = 1
															//@call .cev 2008
															func_CkIfSklCall(Ptr11,AGTACT_SLOT_Q)
																@if reg1 <= 0 {
																	
																		//macro_if_it_can_cast_then_do
																		_agentai_try_skill_slot(AGTACT_SLOT_Q)
																		/*
																		TT1 = v[212] + 150
																		func_ai_skill_usage_check()
																		@if reg1 == 0 {
																				TT5.copy v[TT1], 2
																				TT3 = v[212] + 246
																				ptr_asg(TT3,N1)
																				@break

																		}
																		*/

																}

														}
														@if `!(v[780] & 1) && v[772] >= v[3401] {
														//var1 = Ptr11
														//var2 = 2
														//@call .cev 2008 //9.3.23 found forgetting to comment out - this can be the root of weapon picture collapsing bug.
														func_CkIfSklCall(Ptr11,AGTACT_SLOT_W)
															@if reg1 <= 0 {
																//macro_if_it_can_cast_then_do
																_agentai_try_skill_slot(AGTACT_SLOT_W)
																/*
																	TT1 = v[212] + 170
																	//@call .cev 1929
																	func_ai_skill_usage_check()
																	@if reg1 == 0 {
																		TT5.copy v[TT1], 2
																			v[v[212] + 246] = 2
																			@break

																	}
																	*/

															}

													}
													@if `!(v[800] & 1) && v[792] >= v[3401] {
														//var1 = Ptr11
														//var2 = 3
														//@call .cev 2008
															func_CkIfSklCall(Ptr11,AGTACT_SLOT_E)
															@if reg1 <= 0 {
																//macro_if_it_can_cast_then_do
																_agentai_try_skill_slot(AGTACT_SLOT_E)


															}

													}

													@if `!(v[820] & 1) && v[812] >= v[3401] {
														//var1 = Ptr11
														//var2 = 4
														//@call .cev 2008
														func_CkIfSklCall(Ptr11,AGTACT_SLOT_R)
															@if reg1 <= 0 {
																//macro_if_it_can_cast_then_do
																_agentai_try_skill_slot(AGTACT_SLOT_R)

																/*
																	TT1 = v[212] + 210
																	//@call .cev 1929
																	func_ai_skill_usage_check()
																	@if reg1 == 0 {
																		TT5.copy v[TT1], 2
																			v[v[212] + 246] = 4
																			@break

																	}
																	*/

															}

													}

												}


											}

										}



						// The agent has no target
								}.else bl {
									// for trebuchet
									@if agent_StanceOrder != ORD_MANU { // not in manual mode
										@if agent_MovementOrder >= MovementOrder_TYPE_move_ordered { // the agent wants to move
											@if `agent_AI_decision_bits & AI_decision_bits_FLAG_Need_to_be_packed_to_move { // trebuchet flag is on!
												// cast R Skill to change its mode!
												func_CkIfSklCall(Ptr11,AGTACT_SLOT_R)
													@if reg1 <= 0 {
														//macro_if_it_can_cast_then_do
														_agentai_try_skill_slot(AGTACT_SLOT_R)


													}
											}
										}
									}

								}

						}

					}
				val_add(v[536],N1) // v[536] += 1

			}

	}

}
