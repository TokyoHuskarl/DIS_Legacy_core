__fn func_ai_skill_usage_check{
	/* "TT1=vecX,TT2=vecY
	 Skill1_ID = 141
	 Skill1_func = 142
	 Skill1_type = 143#0 = passive, 1 = liner, 2 = Point, 3 = Target, 4 = AoE ,5=self, 6=passive
	 Skill1_usage = 144 # -1 = extra(bots never cast), 0 = damage, 1 = heal, 2 = buff, 3 = debuff, 4 = dash, 5 = blink
	 Skill1_motiontime = 145
	 Skill1_has_extramotion = 146
	 Skill1_cost = 147
	 Skill1_cooldown = 148
	 Skill1_targobj = 149
	 Skill1_targx = 150
	 Skill1_targy = 151
	 Skill1_range_max = 152
	 Skill1_range_min = 153
	 Skill1_stack1 = 154"*/

	//REFACTORING - inherit skill parameters extracted in func_CkIfSklCall
	
	@loop 1 {
	    // "Only when the unit is moving"
	    @if `skill_AutoCastFlags & 2 {
				@if `agent_MovementOrder < 1 {
						reg1 = 1
						@break
						
				}
				
	    }
	    @if `skill_AutoCastFlags & 4 {
				@if agent_MeleeFightTimer > 0 {
						// "Only when the unit is not in melee combat"
						reg1 = 1
						@break
						
				}
				@break
		
	    }
	    // "Dash"
	    @if skill_Usage == 4 {
				// "Archers and Mages Try Kiting with Dash skill"
				v[345..346] *= agent_AAType >= 1 ? -1 : 1
				
	    }
	    // "##AI casts dash/blink skills only when they are in aggressive stance "
	    reg1 = between(skill_Usage, 4, 5) && agent_StanceOrder != 0 // ? 1 : 0
	    
	}


}

cev .id(1929) .name("AGENT:AI SKILL USAGE"){
	func_ai_skill_usage_check()
}

cev .id(12), .name("Agent:Skill AI") , .parallel , .cond(Const_Is_RTS_Mode), {   
@if s[2] .isOff() {
	    v[536] = v[4532]
	    @while v[v[536]] != 0 {
		func_extract_agent_vars(v[v[536]])
		@if v[684] == 2 {
		    @if `v[603] & 524288 {
			v[212] = v[v[536]] * 300 
			val_add(v[212],N4700) // v[212] += 4700
			Ptr20 = v[212] + 18
			@if v[Ptr20] > 0 {
			    Ptr11 = v[v[536]]
			    @if `!(v[634] & 131072) {
				@if `v[842] < 3 {
				    @loop 1 {
					//Temp9 = v[212] + 7
					v[607].copy Temp4, 2
					Temp1 = v[Ptr20] * 300 
					Temp1 += 4707
					Temp4 .sub v[Temp1], 2
					Temp4 .mul Temp4, 2
					v[3401] = Temp4 + Temp5
					@if `!(v[760] & 1) && v[752] >= v[3401] {
					    //var1 = Ptr11
					    //var2 = 1
					    //@call .cev 2008
					    func_CkIfSklCall(Ptr11 1)
					    @if reg1 <= 0 {
						def macro_if_it_can_cast_then_do = {
							TT2 = v[Ptr20] * 300 
							TT2 += 4707
							v[TT2].copy TT5, 2
							//Inherit what was extracted in func_CkIfSklCall()
							TT5 .sub agent_RelativeX, 2
						}
						macro_if_it_can_cast_then_do
						TT1 = v[212] + 150
						//@call .cev 1929
						func_ai_skill_usage_check()
						@if reg1 == 0 {
						    TT5.copy v[TT1], 2
						    v[v[212] + 246] = 1
						    @break
						    
						}
						
					    }
					    
					}
					@if `!(v[780] & 1) && v[772] >= v[3401] {
					    //var1 = Ptr11
					    //var2 = 2
					    //@call .cev 2008 //9.3.23 found forgetting to comment out - this can be the root of weapon picture collapsing bug.
					    func_CkIfSklCall(Ptr11 2)
					    @if reg1 <= 0 {
						macro_if_it_can_cast_then_do
						TT1 = v[212] + 170
						//@call .cev 1929
						func_ai_skill_usage_check()
						@if reg1 == 0 {
						    TT5.copy v[TT1], 2
						    v[v[212] + 246] = 2
						    @break
						    
						}
						
					    }
					    
					}
					@if `!(v[800] & 1) && v[792] >= v[3401] {
					    //var1 = Ptr11
					    //var2 = 3
					    //@call .cev 2008
					    func_CkIfSklCall(Ptr11 3)
					    @if reg1 <= 0 {
						macro_if_it_can_cast_then_do
						TT1 = v[212] + 190
						//@call .cev 1929
						func_ai_skill_usage_check()
						@if reg1 == 0 {
						    TT5.copy v[TT1], 2
						    v[v[212] + 246] = 3
						    @break
						    
						}
						
					    }
					    
					}
					@if `!(v[820] & 1) && v[812] >= v[3401] {
					    //var1 = Ptr11
					    //var2 = 4
					    //@call .cev 2008
					    func_CkIfSklCall(Ptr11 4)
					    @if reg1 <= 0 {
						macro_if_it_can_cast_then_do
						TT1 = v[212] + 210
						//@call .cev 1929
						func_ai_skill_usage_check()
						@if reg1 == 0 {
						    TT5.copy v[TT1], 2
						    v[v[212] + 246] = 4
						    @break
						    
						}
						
					    }
					    
					}
					
				    }
				    
				    
				}
				
			    }
			    
			}
			
		    }
		    
		}
		v[536] += 1
		
	    }
	    
	    
	}

}
