// Compiling this file updates the DIS-RTS pathfinding in the ldb.
// このファイルをコンパイルするとRTSモードの経路探索システムが更新されます

#include "./../headers/header_common.tpc"
def moduletitle="module_core_RTS_pathfinding_general"

#include "./../headers/header_pathfinding.tpc"

// Both of A* and legacy pathfinding function combined in this one tpc file
#include "./module_core_RTS_pathfinding_algorithm.tpc"

defv PF_is_there_valid_path = 379


//##################
// cev part begins
//##################


cev .id(69), .name("Pathfinding:Manager") , .parallel , .cond(Const_Is_RTS_Mode), {
	
	// count up how many times PF processes are called in 1f, to adjust lag 
	val_init(PF_done_per_1f)

	val_asg(PF_Manager_Loop_AgentPtr,v[4532])

	@while v[PF_Manager_Loop_AgentPtr] > 0 {
		@if PF_done_per_1f < PF_Limit_per1f {
		    // set ptrs
		    v[4596] = v[PF_Manager_Loop_AgentPtr] - 1
		    Pathfinding_AgentData_head_ptr = v[PF_Manager_Loop_AgentPtr] * 300 
		    val_add(Pathfinding_AgentData_head_ptr,N4700) // Pathfinding_AgentData_head_ptr += 4700

		    // deploy agent data
		    v[Pathfinding_AgentData_head_ptr].copy v[600], 300

		    // NOT fleeing 
		    @if `!(agent_ProcessObjBit & BaseObjBit_FLAG_Fleeing) {

					// horrible solution
					@if `!(agent_AI_routine_bits & AI_routine_bits_FLAG_1secDelay_PF) {

						// Ray Casting bits check
						@if `agent_AI_routine_bits & AI_routine_bits_FLAG_RayCast {
							// cast ray to the target only when they prioritize attacking
							reg1 = agent_StanceOrder != ORD_MANU && (agent_MovementOrder <= MovementOrder_TYPE_move_ordered || agent_StanceOrder == ORD_ATK) ? agent_TargetAgentID : 0
							@if reg1 > 0 { // has target
								// get target Map Coord.
								var1 = agent_TargetAgentID * 300 
								var1 += 4726
								v[var1].copy var3, 2
								var3.sub ConstMapTileX0,2 // convert into tile coord

								// get raycasting agent's one.
								agent_MapX.copy var1, 2
								var1.sub ConstMapTileX0,2 // convert into tile coord
								
								// then convert both into Node Coord
								var1.shr N1,4 // v[__id(var1)..__id(var4)] /= 2

								// Then do node ray casting
								func_nodecheck_RayCast(var1,var2,var3,var4)
								@if reg1 == 1 { // wall found
									@if `!(agent_ai_routine_bits & ai_routine_bits_flag_wp_set_by_raycast || agent_AgentBits & AgentBits_FLAG_walldetected) {
										agent_AgentBits |= AgentBits_FLAG_NeedWpToReachObj
										agent_AI_routine_bits |= (AI_routine_bits_FLAG_PATHFINDING + AI_routine_bits_FLAG_WP_set_by_RayCast + AI_routine_bits_FLAG_1secDelay_PF) // + AgentBits_FLAG_walldetected
										agent_AI_routine_bits &= AI_routine_bits_KILL_FLAG_PFcontinue // search path from the beginning

									}
									
								}.else bl {

									// if the agent is chasing WP set by raycast
									@if `agent_ai_routine_bits & ai_routine_bits_flag_wp_set_by_raycast {
										agent_AgentBits &= ~AgentBits_FLAG_NeedWpToReachObj
										
										agent_AI_routine_bits &= ~AI_routine_bits_FLAG_WP_set_by_RayCast // kill Raycast flag
										agent_LeftWPtoChase = -1 // Agent does not chase left WPs anymore
										agent_AI_routine_bits &= ~AI_routine_bits_FLAG_COMPOUND_PF_and_PFcontinue
									}

									@if `!(agent_AI_routine_bits & AI_routine_bits_FLAG_ForcemoveFlag) {
										// if it's not forced prioritizing movement, then 
										agent_MovementOrder = MovementOrder_TYPE_move_ordered

									}
									
									agent_AI_routine_bits &= ~AI_routine_bits_FLAG_RayCast
								}

							}.else bl { // what if you have no target?
								// underconstruction

								// get target Map Coord.

								TT2 = agent_LeftWPtoChase > 0 ? __id(agent_WayPoint1X) : __id(agent_HoldPointX) // Pathfinding_AgentData_head_ptr + 41
								
								// Temp17 = max(agent_LeftWPtoChase, 0) // Use Temp17 to count how many wps left to chase 
								// TT2 += Temp17 * 2
								// val_mul(Temp17,N2)
								// val_add(TT2,Temp17)

								v[TT2].copy var1, 2 // get WP coord from agent WP array

								// convert into tile coordinate - maybe you can deal with this without this func if the PF agent has the target agent
								// @call .cev 2000
								// reg1.copy var3, 2
								macro_convert_relativeXY_into_maptileXY(var1,var2,var3,var4)

								// get raycasting agent's Coord.
								agent_MapX.copy var1, 2
								var1.sub v[69],2 // convert into tile coord
								
								// then convert both into Node Coord
								var1.shr N1,4 // v[__id(var1)..__id(var4)] /= 2
								// var3.div N2,2 // safety

								// node ray casting

								// if it has WPs already, just check how much the distance is before casting ray
								defv {
									RC_justmove_Deltax = __id(TT1)
									RC_justmove_Deltay = __id(TT2)
								}

								@if agent_LeftWPtoChase > 0 { 
									var1.copy RC_justmove_Deltax,2
									RC_justmove_Deltax.sub var3,2
									RC_justmove_Deltax.mul RC_justmove_Deltax,2
									RC_justmove_Deltax.add RC_justmove_Deltay,1
								}.else bl { // if it's the first time ray,
									val_asg(RC_justmove_Deltax,N16)
								}
								@if RC_justmove_Deltax > 6 { // if it's not too close 
									func_nodecheck_RayCast(var1,var2,var3,var4)
								}.else bl{
									val_init(reg1) // omit raycast calc and return 0
								}

								@if reg1 == 1 { // obstacle found
									agent_AI_routine_bits |= (AI_routine_bits_FLAG_PATHFINDING + AI_routine_bits_FLAG_WP_set_by_RayCast)
									agent_AI_routine_bits &= AI_routine_bits_KILL_FLAG_PFcontinue // search path from the beginning

								}.else bl { // no obstacle found
									def KILL_FLAG_raycast = ~(AI_routine_bits_FLAG_RayCast + AI_routine_bits_FLAG_WP_set_by_RayCast)
									agent_AgentBits &= ~AgentBits_FLAG_PF_walldetection_switch

								}
								agent_AI_routine_bits &= KILL_FLAG_raycast
							}

							// after raycasting, kill the flag
							Ptr1 = Pathfinding_AgentData_head_ptr + 1
							agent_AgentType.copy v[Ptr1], 250
						}

						// Pathfinding bits check
						@if `agent_AI_routine_bits & AI_routine_bits_FLAG_PATHFINDING {

								
								// If continue Pathfinding flag is on, ask js path container for path
								@if `agent_AI_routine_bits & AI_routine_bits_FLAG_PFcontinue {
									PF_Manager_Loop_AgentPtr.deref var1,1 
									def JS_GIB_PATH = __str("RTS.path.givePath(\v[",__id(var1),"])")
									js_StringBuffer.asg JS_GIB_PATH, .extract
									@js .run(js_StringBuffer), reg1 // givePath() returns {int} to reg1.
									// msg("get array[\v[21]] from givePath()")

									@if reg2 > 0 { // only if the agent has managed to receive array
										@if reg1 == 0 { // the agent will reach goal node in this attempt
											refresh_deployed_agent_data()
											PF_is_there_valid_path = 1 // will reach the goal..
											// get path
											set_Path_gotten_from_jscontainer()
											pf_agent_move()

											TT1 = Pathfinding_AgentData_head_ptr + 34
											v[TT1] &= ~AI_routine_bits_FLAG_COMPOUND_PF_and_PFcontinue // kill flags
											agent_AI_routine_bits |= AI_routine_bits_FLAG_PFskip

										}.elif reg1 == -1 { // seemingly js path container was empty (caused by loading savegame)
											// then?
										}.else bl { // otherwise
											refresh_deployed_agent_data()

											// get path
											set_Path_gotten_from_jscontainer()
											
											pf_agent_move()

											TT1 = Pathfinding_AgentData_head_ptr + 34
											v[TT1] &= ~AI_routine_bits_FLAG_PATHFINDING // kill flags
											agent_AI_routine_bits |= AI_routine_bits_FLAG_PFskip
										}
									}
								}



								@if `agent_AI_routine_bits & AI_routine_bits_FLAG_PFskip {

									 // Use TT1 as a Ptr
									 TT1 = Pathfinding_AgentData_head_ptr + 34
									 v[TT1] &= KILL_AI_routine_bits_FLAG_PFskip // -65537//~65536
									
								} .else bl {
									
									// Check if the agent can reach the goal node in the end
									@if `agent_AI_routine_bits & AI_routine_bits_FLAG_Pathblocked { // If not
											@if `!(agent_AgentBits & AgentBits_FLAG_walldetected) { // and the situation is not around wall detection
										
										// call PF again only if there's few agents proced (the limit setting is as half as the one for A*)
										@if PF_done_per_1f <= 7 {
											// start dumb "pathfinding" to look as if the agent is searching the path
											func_pathfinding_Astar()
											TT1 = Pathfinding_AgentData_head_ptr + 34 // ACHTUNG!!!! maybe lacking of this was the reason of that bug!
											v[TT1] &= AI_routine_bits_KILL_FLAG_PATHFINDING // -16385//~16384
											val_add(PF_done_per_1f,N1) // PF_done_per_1f += 1
										}

										// Use TT1 as a Ptr to agent_AI_routine_bits
										TT1 = Pathfinding_AgentData_head_ptr + 34
										v[TT1] &= KILL_AI_routine_bits_FLAG_Pathblocked // -8388609 ~8388608

										v[TT1] |= AI_routine_bits_FLAG_1secDelay_PF
										
											}
											
									} .else bl {
										
											
										// go for the A*!
										func_pathfinding_Astar()
										val_add(PF_done_per_1f,N1) // PF_done_per_1f += 1

										// Use TT1 as a Ptr to agent_AI_routine_bits
										TT1 = Pathfinding_AgentData_head_ptr + 34
										v[TT1] |= v[TT1] & AI_routine_bits_FLAG_RayCast || agent_AgentBits & AgentBits_FLAG_walldetected ? AI_routine_bits_FLAG_1secDelay_PF : 0 // if raycasting is on, let it wait for 1 sec
										v[TT1] &= AI_routine_bits_KILL_FLAG_PATHFINDING // -16385//~16384
										@if `v[TT1] & AI_routine_bits_FLAG_Pathblocked { // the agent seemingly cannot reach the goal node
											// then end Pathfinding
											v[TT1] &= ~AI_routine_bits_FLAG_RayCast // kill raycasting flag


										}
											
											
									}
									
								}
								
						}
						
					}
		    }
		    increment_var(PF_Manager_Loop_AgentPtr) // PF_Manager_Loop_AgentPtr += 1

		}.else bl {
			@break
		}
	}

}

cev .id(1769), .name("Pathfinding:retarded") , {   
	@comment "it's removed."
	// func_pathfinding_retarded()
}

cev .id(1770), .name("Pathfinding:AStar"), {   
	func_pathfinding_Astar()
}



//LEGACY cev setting
cev .id(1771), .name("PathfindingFunc:Move") , {   
	func_pathfinding_move()
}

cev .id(1772), .name("PathfindingFunc:Open Node") , {   
	func_pathfinding_open_Node()
}


// maybe obsolete?
cev .id(1773), .name("PathfindingFunc:Remove Opened Node") , {   
	// func_pathfinding_remove_OpenNode()
}


