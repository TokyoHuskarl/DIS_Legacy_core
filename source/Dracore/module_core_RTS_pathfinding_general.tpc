// Compiling this file updates the DIS-RTS pathfinding in the ldb.
// このファイルをコンパイルするとRTSモードの経路探索システムが更新されます

#include "./../headers/header_common.tpc"
def moduletitle="module_core_RTS_pathfinding_general"


// Maybe this part should be summarized as a header for PF

// defs for PF system
defs Bool_PF_Wall_Detection = 280


// Variables used for Pathfinding processes
defv {
	PFckPtr = 4587

	PF_Manager_Loop_AgentPtr = 4598

	PF_done_per_1f = 4599
}

defv Pathfinding_AgentData_head_ptr = 4597

// Around Agent data 
defv Head_of_Agent_Buffer_PF = 4601
vname[4601], "Pathfinding_Buffer_for_Agent[63]", {
	.expand(64),
	.pad(64),

}

def pfagent_PtrAddress = __id(Head_of_Agent_Buffer_PF)
defv {
	pfagent_AgentBits = pfagent_PtrAddress + 3
	pfagent_TargetAgentID = pfagent_PtrAddress + 18
	pfagent_MoveUvectorX = pfagent_PtrAddress + 21
	pfagent_MapX =  pfagent_PtrAddress + 26
	pfagent_AI_routine_bits = pfagent_PtrAddress + 34
	pfagent_Cohort_ID = pfagent_PtrAddress + 35
	pfagent_HoldPointX = pfagent_PtrAddress + 41
	pfagent_LeftWPtoChase = pfagent_PtrAddress + 55
}


// misc consts
def KILL_AI_routine_bits_FLAG_Pathblocked = ~AI_routine_bits_FLAG_Pathblocked
def KILL_AI_routine_bits_FLAG_PFskip = ~AI_routine_bits_FLAG_PFskip


//pathfinding funcs load
#include "./module_core_RTS_pathfinding_functions.tpc"

// Both of A* and legacy pathfinding function combined in this one tpc file
#include "./module_core_RTS_pathfinding_algorithm.tpc"



//##################
// cev part begins
//##################


cev .id(69), .name("Pathfinding:Manager") , .parallel , .cond(Const_Is_RTS_Mode), {
	
	// count up how many times PF processes are called in 1f, to adjust lag 
	PF_done_per_1f = 0

	PF_Manager_Loop_AgentPtr = v[4532]
	@while v[PF_Manager_Loop_AgentPtr] != 0 {
	    v[4596] = v[PF_Manager_Loop_AgentPtr] - 1
	    Pathfinding_AgentData_head_ptr = v[PF_Manager_Loop_AgentPtr] * 300 
	    Pathfinding_AgentData_head_ptr += 4700
	    v[Pathfinding_AgentData_head_ptr].copy v[600], 300
	    // 
	    @if `!(agent_ProcessObjBit & BaseObjBit_FLAG_Fleeing) {
		// Pathfinding bits check
		@if `agent_AI_routine_bits & AI_routine_bits_FLAG_PATHFINDING {
		    @if `agent_AI_routine_bits & AI_routine_bits_FLAG_PFskip {

			 // Use TT1 as a Ptr
			 TT1 = Pathfinding_AgentData_head_ptr + 34
			 v[TT1] &= KILL_AI_routine_bits_FLAG_PFskip // -65537//~65536
			
		    } .else bl {
			
			// Check if the agent can reach the goal node in the end
			@if `agent_AI_routine_bits & AI_routine_bits_FLAG_Pathblocked { // If not
			    @if `!(agent_AgentBits & AgentBits_FLAG_walldetected) { // and the situation is not around wall detection
				
				// then, retarded PF is not done many times (the limit setting is as half as the one for A*)
				@if PF_done_per_1f <= 8 {
					// start dumb "pathfinding" to look as if the agent is searching the path
					func_pathfinding_retarded()
					PF_done_per_1f += 1
				}

				// Use TT1 as a Ptr to agent_AI_routine_bits
				TT1 = Pathfinding_AgentData_head_ptr + 34
				v[TT1] &= KILL_AI_routine_bits_FLAG_Pathblocked // -8388609 ~8388608
				v[TT1] |= AI_routine_bits_FLAG_PFskip
				
			    }
			    
			} .else bl {
				
				@if PF_done_per_1f <= 16 {
					
					// go for the A*!
					func_pathfinding_Astar()
					PF_done_per_1f += 1

					// Use TT1 as a Ptr to agent_AI_routine_bits
					TT1 = Pathfinding_AgentData_head_ptr + 34
					@if `!(v[TT1] & AI_routine_bits_FLAG_Pathblocked) {
						// end Pathfinding
						v[TT1] &= AI_routine_bits_KILL_FLAG_PATHFINDING // -16385//~16384
					}
					
				}
			    
			}
			
		    }
		    
		}
		
	    }
	    PF_Manager_Loop_AgentPtr += 1

	}

}

cev .id(1769), .name("Pathfinding:retarded") , {   
	func_pathfinding_retarded()
}

cev .id(1770), .name("Pathfinding:AStar"), {   
	func_pathfinding_Astar()
}



//LEGACY cev setting
cev .id(1771), .name("PathfindingFunc:Move") , {   
	func_pathfinding_move()
}

cev .id(1772), .name("PathfindingFunc:Open Node") , {   
	func_pathfinding_open_Node()
}

cev .id(1773), .name("PathfindingFunc:Remove Opened Node") , {   
	func_pathfinding_remove_OpenNode()
}


