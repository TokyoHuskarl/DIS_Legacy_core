def MAPVAR_START =2000
def MAPSWITCH_START =400

__fn macro_script_split{
	t[510] .split "(", t[2999], v[341]
	//t[3001] .split ")", t[3000], v[341]
	t[3000] .split ",", t[3000], v[341]
}

#include "./header_scripts_functions.tpc"

//#############################
//DIS script tokens

def DIS_Script_Shebang = "#!DIS_SCRIPT"

def EOF = "EOF"
def NEST_START = "[N:"
def NEST_START_SIZE = 3
def NEST_INNER_HEAD="*nH"
def NEST_FOOTER = "*nE"
def NEST_FOOTER_SIZE_sub1 = 2
defv ROOT_INDEX = 739348//510
defv Var_NEST_DEPTH = 510
defv NEST_COUNTER = 509
defs BREAK_SWITCH = 291
def NEST_HEADER_LENGTHS =12

defv Var_save_offset =282

defv DEBUG_NESTCOUNT=4750

def Const_NEST_VAR_ADDRESS_BEGIN = 739348
def ROOT_INDEX_ADDRESS = Const_NEST_VAR_ADDRESS_BEGIN

/*
TODO:
	スイッチのデバッグ画像表示を消す
*/

__fn macro_split_function_str $ptr_str {
        t[$ptr_str] .split "(", t[3000], v[341]
        //t[3001] .split ")", t[3000], v[341]
        t[3000] .split ",", t[3000], v[341]
 

}

__fn msg_script_debug{
	    @if Var_NEST_DEPTH>=1{
		    v[305] = Var_save_offset
	    	func_show_msg("\c[17]READING - \t[510] now:\v[\v[281]] long:\v[343] targ:\v[305]")
	    }
}



//RETURN t[502]
__fn func_compile_map_script $ptr2scriptstr{
		//back up script to t[501] for Debug
		t[501] .asg t[$ptr2scriptstr]
		//TT1=index
		TT1=0
		//v[505]=counter
		v[505]=0
		//init t[502] to use it return value
		t[502] .asg ""
		@loop .inf() {
			//TT10=ptrstr
			TT10=v[1219]+v[505]
			t[$ptr2scriptstr] .inStr StrConst_LF,TT2, .beg(TT1) 
			@if TT2 == -1 { //finish preprocess
				t[$ptr2scriptstr] .inStr EOF TT2 .beg(TT1)
				TT3=TT2-TT1
				t[TT10] .asg .subs(t[$ptr2scriptstr],TT1,TT3)
				t[502] .cat t[TT10]
				t[502] .cat EOF
				TT1=TT2+1
				v[505]+=1//++
				@break
			} .else bl { //Check the line
				TT3=TT2-TT1
				//t[TT10]=str till LF - one line
				t[TT10] .asg .subs(t[$ptr2scriptstr],TT1,TT3)
				//TT4=nest index
				t[TT10] .inStr "{" TT4
				@if TT4 == -1 { //no nest found
					t[502] .cat t[TT10]
					t[502] .cat StrConst_LF
					//shift root INDEX to next line
					TT1=TT2+1
					v[505]+=1//++
				} .else bl { //nest found 
					//TT5 = nest index
					TT5=TT1+TT4+1

					//Save StartIndex
					TT11=TT1
					//anyway shift root INDEX to next line
					TT1=TT2+1
					TT12=1
					TT13=0

					//check ballance loop
					@loop .inf(){
						/*
						TT5= nest index
						TT2="{"index
						TT4="}"index
						TT11=saved root INDEX start point
						TT13=ballance
						TT13=how many nests the current checking nest contains
						TT16=Temp counter1 TT17=temp counter2
						*/



						t[$ptr2scriptstr] .inStr "}" TT4 .beg(TT5)
						@if TT4 == -1 { //error, cannot find }
							func_show_msg("\c[17]ERROR:Nest Unballanced - Couldn't find } in mapscript nest")
							//func_show_msg("\c[17]DEBUG:Index position:\v[345]")
							@break
						} .else bl { //} found, then
							TT12-=1 //nest depth--
							TT13+=1
							t[$ptr2scriptstr].asg .remove(t[$ptr2scriptstr], TT4, 1)
							t[$ptr2scriptstr].asg .ins(t[$ptr2scriptstr], TT4, NEST_FOOTER)
						}

						//Check if other "{" contained or not
						t[$ptr2scriptstr] .inStr "{" TT2 .beg(TT5)
						@if `TT2 != -1 && TT2<TT4 { //found
							TT12+=1 // nest depth++
						}
						//ballanced?
						@if TT12 != 0 { //not yet
							//then
							TT5=TT2+1 //shift index 
						}.else bl { //ballanced
							t[$ptr2scriptstr].asg .rep(t[$ptr2scriptstr],NEST_FOOTER,"}")
							TT4-=(NEST_FOOTER_SIZE_sub1)*(TT13-1)
							//set NEST lengths...
							TT3=(TT4-TT11+1)
							TT3+=(TT13*NEST_HEADER_LENGTHS)
							//set str3 as temp str
							str3.asg NEST_START

							//set static digits link to secure index stability 
							TT16=TT3
							TT17=0
							//count up TT3 digits
							@while v[356] > 0 {
								TT16 /= 10
								TT17 += 1
							}
							//add "0"
							TT17=8-TT17
							@loop TT17 {
								str3.cat "0"
							}
							str3.cat "\v[343]" .extract
							str3.cat "]"
							//close NEST header
							//t[TT10] .cat .subs(t[$ptr2scriptstr],TT1,TT3)
							str3.cat t[TT10]
							str3.cat StrConst_LF
							t[502] .cat str3

							v[505]+=1//++
							@break
						}
					}
				}
			}
		}
	
}


__fn func_script_interpreter_recursion $PARENT_INDEX_ADDRESS $LoopAmount {
	//######################
	//map script interpreter
	//######################
	//$LoopAmount
       @loop .inf() .dst DEBUG_NESTCOUNT {
	    NEST_COUNTER = v[1219]
	    //search LF
	    //Var_save_offset = TempCharSearch
	    t[NEST_COUNTER] .inStr StrConst_LF, Var_save_offset, .beg(v[$PARENT_INDEX_ADDRESS])
	    @if Var_save_offset == -1 { //EOF
		    //func_show_msg("\c[17]DEBUG - EOF reached!")
		    @break
	    }

	    //TT3 = shift
	    TT3=Var_save_offset-v[$PARENT_INDEX_ADDRESS]
	    //load one line into t[510]
	    t[510] .asg .subs(t[NEST_COUNTER],v[$PARENT_INDEX_ADDRESS],TT3)

	    @if Var_NEST_DEPTH>0{
	    	@if t[510] .contains "}"{
			//this nest is overino
		    	//func_show_msg("\c[17]DEBUG - nest end!")
			@break
		}
	    }
	    //t[501]=temp
	    t[501] .asg .subs(t[510],0,3)
	    @if t[501] .eq NEST_START {//nest found
	    		v[4750]+=1
			t[510] .inStr "{" Var_save_offset
			t[501] .asg .subs(t[510],0,Var_save_offset)
			@if t[501] .contains "if"{ //found if
				TT1=0
				//check condition
				t[510] .inStr "(" TT1
				//t[510] .inStr "{" Var_save_offset
				TT1+=1
				Var_save_offset-=1

				//now extract what is in if()
				BREAK_SWITCH.off
				t[510] .asg .subs(t[510],TT1,Var_save_offset) .extract
				//@call .cev 1825 //check only condition
				scripts_cond()
				//what the hell is this retarded condition check proc? lol
				reg1 = BREAK_SWITCH==1?0:1
				BREAK_SWITCH.off

				@if reg1 == 1 {
					//OPEN NEST
					Var_NEST_DEPTH+=1
					//shift index to next line
					v[Const_NEST_VAR_ADDRESS_BEGIN+Var_NEST_DEPTH]=v[$PARENT_INDEX_ADDRESS]+TT3+1
					//RECUR INTERPRETER
					Ptr1 = Const_NEST_VAR_ADDRESS_BEGIN+Var_NEST_DEPTH
					var2 = 114514//this value can be needless tho
					@call .cev 1815
					//close nest
					Var_NEST_DEPTH-=1
				}.else bl{ //ELSE
					//func_show_msg("\c[17]DEBUG - Didn't fulfilled condition. - \t[510]")
				}
				
				Ptr1=Const_NEST_VAR_ADDRESS_BEGIN+Var_NEST_DEPTH
				//SHIFT NEST
				TT1=v[$PARENT_INDEX_ADDRESS]+NEST_START_SIZE
				
				t[NEST_COUNTER].exMatch( ".*\]", str1, Var_save_offset, .beg(TT1))
				str1.toNum Var_save_offset
				v[$PARENT_INDEX_ADDRESS]+=Var_save_offset+1
				TT3=v[$PARENT_INDEX_ADDRESS]
				//func_show_msg("\c[17]DEBUG - indexstart:\v[341] shift:\v[342] end:\v[343] genbun \t[501]")
				
				//If current checking nest is ROOT

				BREAK_SWITCH.off

			}
	    }.else bl{
		    v[$PARENT_INDEX_ADDRESS]=Var_save_offset+1
		    //Map Script Function Check
		    @call .cev 1821
		    t[3000..3300] .asg ""
	    }
	    @if BREAK_SWITCH .isOn() {
		//func_show_msg("\c[17]DEBUG - NEST COUNT \v[4750]")
		@break
	    }
	    
	}
}


//Need your lovely developement <3 lel
__fn func_convert_str_into_map_script $ptr_target_str {


	//Check if DIS shebang is Head of the str
	func_check_if_str_is_DIS_script($ptr_target_str)
	__if DIS_EXPERIMENTAL == 1 {
		@if reg1 == 0{
			func_errlog("Loaded string has no DIS shebang. Is it really written in DIS Script?")
		}
	}

	TT1 = 0
	@loop .inf() {
		t[$ptr_target_str] .inStr "//" TT2 .beg(TT1) 
		@if TT2==-1 {
			@break
		} .else bl {
			t[$ptr_target_str] .inStr (StrConst_LF,TT3,.beg(TT2))
			@if TT3==-1 {//underconstruction, the last line
			} .else bl {//erase coment out
				TT3-=TT2
				t[$ptr_target_str] .asg .remove(t[$ptr_target_str],TT2,TT3)
			}
		}
	}



	// TT1=index
	//Check //Comment Out
	TT1 = 0
	//$ptr_target_str
	@loop .inf() {
		t[$ptr_target_str] .inStr "//" TT2 .beg(TT1) 
		@if TT2==-1 {
			@break
		} .else bl {
			t[$ptr_target_str] .inStr (StrConst_LF,TT3,.beg(TT2))
			@if TT3==-1 {//underconstruction, the last line
			} .else bl {//erase coment out
				TT3-=TT2
				t[$ptr_target_str] .asg .remove(t[$ptr_target_str],TT2,TT3)
			}
		}
	}

	//check /**/ Type comment out
	TT1 = 0
	@loop .inf() {
		t[$ptr_target_str] .inStr "/*" TT2 .beg(TT1) 
		@if TT2==-1 {
			@break
		} .else bl {
			t[$ptr_target_str] .inStr ("*/",TT3,.beg(TT2))
			@if TT3==-1 {//underconstruction, illegal comment out, cannot find */!
				func_show_msg("\c[17]ERROR:Mapscript loading - Illegal comment out! Couldn't find */")
			} .else bl {//erase coment out
				TT3=TT3-TT2+2
				t[$ptr_target_str] .asg .remove(t[$ptr_target_str],TT2,TT3)
			}
		}
	}

	//erase indent
	t[$ptr_target_str] .asg .exrep(t[$ptr_target_str],"\t","")
	//erase blank 
	t[2999] .asg"^\t[525]" .extract
	t[$ptr_target_str] .asg .exrep(t[$ptr_target_str], t[2999],"")
	

	//GLOBAL VARIABLES

	//replace MAPVAR_*
	TT1 = 0
	@loop .inf() {
		t[$ptr_target_str] .exMatch("\$MAPVAR_\d", str1, TT2,.beg(TT1)) 
		@if TT2==-1 {
			@break
		} .else bl {
			str1 .split("_", t[2999], TT3)
			t[3000] .toNum(var1)
			var1 += MAPVAR_START
			str1 .asg "\v[11]" .extract
			t[$ptr_target_str] .asg .exrep(t[$ptr_target_str] ,"\$MAPVAR_\d", str1) .first
			TT1=TT2
		}
	}
	//replace MAPSWITCH_*
	TT1 = 0
	@loop .inf() {
		t[$ptr_target_str] .exMatch("\$MAPSWITCH_\d", str1, TT2,.beg(TT1)) 
		@if TT2==-1 {
			@break
		} .else bl {
			str1 .split("_", t[2999], TT3)
			t[3000] .toNum(var1)
			var1 += MAPSWITCH_START
			str1 .asg "\v[11]" .extract
			t[$ptr_target_str] .asg .exrep(t[$ptr_target_str] ,"\$MAPSWITCH_\d", str1) .first
			TT1=TT2
		}
	}
	


	t[$ptr_target_str] .cat EOF

	//temporary check
	//t[$ptr_target_str].ToFile("debug")

}

__fn func_execute_script $ptr2scriptstr $var_count {

		t[v[1219]].asg t[$ptr2scriptstr]
		//DEBUG
		@if .testPlay(){
			t[510] .cat "$$$$$$$$$$$$$$$$$ \v[505]count " .extract
			t[510] .cat StrConst_LF
			t[510] .cat t[$ptr2scriptstr]
		       /*@loop v[505] .dst Var_NEST_DEPTH {
			    v[11] = v[1219] + Var_NEST_DEPTH
			    t[510] .cat t[v[11]]
			    t[510] .cat StrConst_LF
			}*/
			//t[510] .ToFile "debug_check_how_it_processed" .utf8
		}
		//t[$ptr2scriptstr] .split StrConst_LF, t[v[1219]], v[505]
		
		//######################
		//map script interpreter
		//######################
		ROOT_INDEX=0
		Var_NEST_DEPTH=0

		//call function
		func_script_interpreter_recursion(ROOT_INDEX_ADDRESS v[505])

                s[291].off

}

//use this function when you have to execute script without script compile function
//like when you open console and exec "hoge"
//Attention: This seems unstable, maybe need converting proc anyway
__fn func_execute_script_instantly $ptr2scriptstr $var_count {

		func_compile_map_script($ptr2scriptstr)
		t[v[1219]].asg t[502]
		//DEBUG
		@if .testPlay(){
			t[510] .asg t[501]
			t[510] .cat StrConst_LF
			t[510] .cat "$$$$$$$$$$$$$$$$$ \v[505]count " .extract
			t[510] .cat StrConst_LF
			t[510] .cat t[502]
		       /*@loop v[505] .dst Var_NEST_DEPTH {
			    v[11] = v[1219] + Var_NEST_DEPTH
			    t[510] .cat t[v[11]]
			    t[510] .cat StrConst_LF
			}*/
			t[510] .ToFile "debug_check_how_it_processed" .utf8
		}
		//t[$ptr2scriptstr] .split StrConst_LF, t[v[1219]], v[505]
		
		//######################
		//map script interpreter
		//######################
		ROOT_INDEX=0
		Var_NEST_DEPTH=0

		//call function
		func_script_interpreter_recursion(ROOT_INDEX_ADDRESS v[505])

                s[291].off

}



__fn func_check_if_str_is_DIS_script $checkstr {
	t[__id($checkstr)].popLine(str1)
	@if str1.eq DIS_Script_Shebang{
		reg1 = 1
	}.else bl{
		reg1 = 0
	}
}
