// misc macro
// included in header_common.tpc

//cev 2000
//$regX and $regY must be vars set at address in a row
__fn macro_convert_relativeXY_into_maptileXY $TileX $TileY $regX $regY {
	v[__id($TileX)].copy $regX, 2
	v[__id($regX)] += 8
	v[__id($regY)] += 24
	v[__id($regX)].sub LEGV_MainMAP_PointOfRefereneX, 2 //?f0
	v[__id($regX)] /= 16
	v[__id($regY)] /= 16
}

//cev 2001
__fn macro_convert_maptileXY_into_relativeXY $TileX $TileY $regX $regY {
	@map[v[501]].setVehiclePos .airship .pos $TileX, $TileY .retain
	v[__id($regX)] = airship.scrx
	v[__id($regY)] = airship.scry
	v[__id($regY)] -= 8
}


__fn macro_convert_absolute_coord $RelXstart $regXstart {
	// ?
	//v[__id($RelXstart)].copy $regXstart, 2
	//v[__id($regXstart)].sub LEGV_MainMAP_PointOfRefereneX, 2 //?f0
	
}


// return the result to reg1, if reg1 = 1, thenthe given cord is out of map
__fn macro_ck_if_given_rel_coord_is_inside_map $X $Y { 
	macro_convert_relativeXY_into_maptileXY($X,$Y,reg2,reg3)
	reg1 = between(reg2,Map_LimitCoordX_min,Map_LimitCoordX_max)&&between(reg3,Map_LimitCoordY_min,Map_LimitCoordY_max)? 0 : 1

}


// convert t[] to v[]
__fn t2v $t $v {
	t[__id($t)].toNum $v
}




__fn splitStrData $str {
		t[2998] .asg $str
		t[2998] .split ",", t[3000], reg1
}

__fn convertStrBitsTable_to_r1 $str {
	t[__id($str)] .split "|", t[3200], var1
	reg1 = 0
	@loop var1 .dst var5 {
	    var2 = 3200 + var5
	    t[var2] .toNum var4
	    reg1 |= pow(2, var4 - 1)
	}
	
}

// you cannot give this 
__fn increment_var $targv {
	v[__id($targv)].add N1,1 
}

__fn val_asg $v1 $v2 {
	v[__id($v2)].copy v[__id($v1)],1
}

__fn val_add $v1 $v2 {
	v[__id($v1)].add v[__id($v2)],1
}

__fn val_sub $v1 $v2 {
	v[__id($v1)].sub v[__id($v2)],1
}

__fn val_mul $v1 $v2 {
	v[__id($v1)].mul v[__id($v2)],1
}

__fn val_div $v1 $v2 {
	v[__id($v1)].div v[__id($v2)],1
}

__fn val_mod $v1 $v2 {
	v[__id($v1)].mod v[__id($v2)],1
}

// ptr series
__fn ptr_asg $v1 $v2 {
	v[__id($v2)].copy v[$v1],1
}

__fn ptr_add $v1 $v2 {
	v[$v1].add v[__id($v2)],1
}

__fn ptr_sub $v1 $v2 {
	v[$v1].sub v[__id($v2)],1
}

__fn ptr_mul $v1 $v2 {
	v[$v1].mul v[__id($v2)],1
}

__fn ptr_div $v1 $v2 {
	v[$v1].div v[__id($v2)],1
}

__fn ptr_mod $v1 $v2 {
	v[$v1].mod v[__id($v2)],1
}
